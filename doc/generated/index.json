[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/core/Config.js",
    "content": "import defaults     from 'lodash/defaults';\nimport startsWith   from 'lodash/startsWith';\nimport endsWith     from 'lodash/endsWith';\n\nconst defaultConfig = {\n    env : 'prod',\n    basePath : '/',\n    assetPath : '/'\n};\n\nclass ConfigClass {\n\n    initialize(bootstrapConfig = {}) {\n        this.baseConfig = {};\n\n        // merge default config\n        defaults( this.baseConfig, bootstrapConfig, defaultConfig);\n\n        // strip first slashes on sub dir paths\n        this.baseConfig.assetPath = startsWith(this.baseConfig.assetPath, '/') ? this.baseConfig.assetPath.substr(1) : this.baseConfig.assetPath;\n\n        // ensure trailing slash\n        this.baseConfig.basePath += (endsWith(this.baseConfig.basePath, '/') ? '' : '/' );\n        this.baseConfig.assetPath += (endsWith(this.baseConfig.assetPath, '/') ? '' : '/' );\n\n        // auto detect protocol://domain:port\n        this.baseConfig.origin = location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '');\n\n        // Attempt to create setters & getters for bootstrapConfig items\n        Object.keys( bootstrapConfig ).forEach( (configKey) => {\n            if ( this[configKey] === undefined && this['_'+configKey] === undefined) {\n                Object.defineProperty( this, configKey, {\n                    get : function () {\n                        return this[configKey];\n                    },\n                    set : function (value) {\n                        this['_'+configKey] = value;\n                    }\n                });\n\n                // Set initial value\n                this[configKey] = bootstrapConfig[configKey];\n            }\n        });\n\n    }\n\n    get env() {\n        return this.baseConfig.env;\n    }\n\n    get assetPath() {\n        return this.baseConfig.origin + this.baseConfig.basePath + this.baseConfig.assetPath;\n    }\n\n    get basePath() {\n        return this.baseConfig.origin + this.baseConfig.basePath;\n    }\n\n}\n\n// Instantiate Singleton\nconst Config = new ConfigClass();\n\nexport {Config as default, ConfigClass};",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/core/Config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "defaultConfig",
    "memberof": "src/core/Config.js",
    "static": true,
    "longname": "src/core/Config.js~defaultConfig",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/core/Config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"env\": string, \"basePath\": string, \"assetPath\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "Config",
    "memberof": "src/core/Config.js",
    "static": true,
    "longname": "src/core/Config.js~Config",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/core/Config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "src/core/Config.js~ConfigClass"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "ConfigClass",
    "memberof": "src/core/Config.js",
    "static": true,
    "longname": "src/core/Config.js~ConfigClass",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/core/Config.js",
    "importStyle": "{ConfigClass}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/core/Config.js~ConfigClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Config.js~ConfigClass#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "bootstrapConfig",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "baseConfig",
    "memberof": "src/core/Config.js~ConfigClass",
    "static": false,
    "longname": "src/core/Config.js~ConfigClass#baseConfig",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "['_' + configKey]",
    "memberof": "src/core/Config.js~ConfigClass",
    "static": false,
    "longname": "src/core/Config.js~ConfigClass#['_' + configKey]",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "[configKey]",
    "memberof": "src/core/Config.js~ConfigClass",
    "static": false,
    "longname": "src/core/Config.js~ConfigClass#[configKey]",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "get",
    "name": "env",
    "memberof": "src/core/Config.js~ConfigClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Config.js~ConfigClass#env",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "get",
    "name": "assetPath",
    "memberof": "src/core/Config.js~ConfigClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Config.js~ConfigClass#assetPath",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "basePath",
    "memberof": "src/core/Config.js~ConfigClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Config.js~ConfigClass#basePath",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/core/EventTarget.js",
    "content": "const EVENTS = '_EVENTS'; // Define a unique key for all instances to create event hash on\nconst LISTEN_TARGETS = '_LISTEN_TARGETS'; // Define a unique key for all instances to create a listen array on;\n\n/**\n * The EventTarget is a class that allows the use of custom events in it's instances. it is an implementation of the\n * Pub/Sub pattern.\n *\n * It is generally not used directly but is inherited from in other classes.\n *\n * Important : This class should not be mistaken with the native EventTarget class Elements, Window and Document inherit from.\n *\n */\nclass EventTarget {\n\n    /**\n     * This MUST be called by sub-classes to instantiate the correct properties where events are stored.\n     *\n     */\n    constructor() {\n\n        /**\n         * @private\n         * @type {{}}\n         */\n        this[EVENTS] = {};\n\n        /**\n         * @private\n         * @type {Array}\n         */\n        this[LISTEN_TARGETS] = [];\n\n    }\n\n    /**\n     * Register an event handler for a type\n     * @param {string} type - The type of the event. A custom human readable string.\n     * @param {function} handler - The function that will be invoked when the event is triggered. No signature is provided, it is up to the developer to determine what is passed to the listener at trigger time\n     * @param {Object} [context=this] - The object the listener will called on. Defaults to `this` and can be changed if event delegation is needed.\n     */\n    on(type, handler, context = this) {\n\n        if (typeof type === 'string') {\n\n            // ensure array of listeners for this type is available\n            if ( !this.hasListeners(type) ) {\n                this[EVENTS][type] = [];\n            }\n\n            this[EVENTS][type].push( {handler: handler, context : context} );\n\n        } else { // Assume we have been passed an object of events.\n\n            // loop over hash using key as type, and value as handler\n            for ( const key in type) {\n                if (type.hasOwnProperty(key)) {\n                    let value = type[key];\n                    this.on(key, value);\n                }\n            }\n\n        }\n\n    }\n\n    /**\n     * Register an event handler that will trigger only once\n     * @param {string} type - The type of the event. A custom human readable string.\n     * @param {function} handler - The function that will be invoked when the event is triggered. No signature is provided, it is up to the developer to determine what is passed to the listener at trigger time\n     * @param {Object} [context=this] - The object the listener will called on. Defaults to `this` and can be changed if event delegation is needed.\n     */\n    once(type, handler, context = this) {\n\n        // create surrogate handler that will execute once an remove event\n        const onceHandler = (...eventData) => {\n            handler.apply(this, eventData);\n            this.off(type, onceHandler);\n        };\n\n        // register our surrogate event\n        this.on(type, onceHandler, context);\n    }\n\n    /**\n     * Remove event handler, either of one type, or just one listener\n     * @param {string} type - The type of the event. A custom human readable string.\n     * @param {function} [handler] - The event handler to be removed. If unspecififed, all handlers of the supplied type are removed.\n     */\n    off(type, handler) {\n\n        if ( !type ) {\n            this[EVENTS] = {};\n        } else if ( this.hasListeners(type) ) {\n            if (typeof handler === \"undefined\") {\n                this[EVENTS][type] = [];\n            } else {\n                const registeredHandler = this[EVENTS][type].find( (testHandler) => testHandler.handler === handler );\n                if (registeredHandler !== -1) {\n                    this[EVENTS][type].splice( this[EVENTS][type].lastIndexOf(registeredHandler) , 1);\n                }\n            }\n        }\n\n    }\n\n    /**\n     * Utility to allow EventTargets to listen to other EventTarget's events easily\n     *\n     * @TODO handle objects like in `on`\n     *\n     * @param {EventTarget} target - The instance of EventTarget to listen to events on\n     * @param {string} type - The type of the event. A custom human readable string.\n     * @param {function} handler - The function that will be invoked when the event is triggered. No signature is provided, it is up to the developer to determine what is passed to the listener at trigger time\n     */\n    listenTo(target, type, handler) {\n\n        if ( !(target instanceof EventTarget) ) {\n            throw new Error('Attempting to listenTo an object that does not inherit from EventTarget');\n        }\n\n        // Determine if we are listening to this object yet\n        let targetListeners = this[LISTEN_TARGETS].find( (testTarget) => testTarget.target === target);\n\n        // If target listeners doesn't exist yet, add it here\n        if ( !targetListeners ) {\n            targetListeners = {target : target, listeners : {} };\n            this[LISTEN_TARGETS].push( targetListeners );\n        }\n\n        // make sure an array for this type of event is available\n        targetListeners.listeners[type] = targetListeners.listeners[type] || [];\n\n        // Add to register of functions\n        targetListeners.listeners[type].push( handler );\n\n        // bind event normally\n        target.on(type, handler, this);\n\n    }\n\n    /**\n     * Stop listening for events on another EventTarget\n     * @param {EventTarget} target - The instance of EventTarget to stop receiving events from.\n     * @param {string} type - The type of the event. A custom human readable string.\n     */\n    stopListening(target, type) {\n\n        // Determine if we are listening to this object yet\n        // var targetListeners = _.find(this[LISTEN_TARGETS], {target : target });\n        const targetListeners = this[LISTEN_TARGETS].find( (testTarget) => testTarget.target === target);\n\n        // If listeners are registered for this target\n        if ( targetListeners ) {\n\n            if (type) {\n\n                targetListeners.listeners[type].forEach( function (handler) {\n                    target.off(type, handler)\n                });\n\n            } else {\n\n                for (let typeIter in targetListeners.listeners ) {\n                    targetListeners.listeners[typeIter].forEach( function (handler) {\n                        target.off(typeIter, handler)\n                    });\n                }\n\n            }\n\n        }\n\n    }\n\n    /**\n     * Determine if this object has events registered of a certain type\n     * @param {string} type - Event type to check.\n     * @returns {boolean} if the EventTarget has listeners for this type of event\n     */\n    hasListeners(type) {\n        return typeof this[EVENTS][type] !== 'undefined'\n    }\n\n    /**\n     * Trigger an event on this object\n     * @param {string} type - The event type who's listeners will be triggered\n     * @param {...*} eventParams - The parameters to be passed to the listening objects. Any number can be passed but it is recomended to only pass a single event object on which you may attach multiple properties.\n     */\n    trigger(type, ...eventParams) {\n\n        // if an event of this type has been registered on this event\n        if ( this.hasListeners(type) ) {\n\n            // loop over listeners registered for this event type\n            // note : could have used for of, but could need a Symbol polyfill which is too much code.\n            const handlers = this[EVENTS][type];\n            for ( const eventKey in handlers ) {\n\n                if ( handlers.hasOwnProperty(eventKey) ) {\n                    let event = this[EVENTS][type][eventKey];\n\n                    event.handler.apply(event.context, eventParams);\n                }\n\n            }\n\n        }\n\n    }\n\n\n}\n\n\nexport default EventTarget;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/core/EventTarget.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "EVENTS",
    "memberof": "src/core/EventTarget.js",
    "static": true,
    "longname": "src/core/EventTarget.js~EVENTS",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/core/EventTarget.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "LISTEN_TARGETS",
    "memberof": "src/core/EventTarget.js",
    "static": true,
    "longname": "src/core/EventTarget.js~LISTEN_TARGETS",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/core/EventTarget.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "EventTarget",
    "memberof": "src/core/EventTarget.js",
    "static": true,
    "longname": "src/core/EventTarget.js~EventTarget",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/core/EventTarget.js",
    "importStyle": "EventTarget",
    "description": "The EventTarget is a class that allows the use of custom events in it's instances. it is an implementation of the\nPub/Sub pattern.\n\nIt is generally not used directly but is inherited from in other classes.\n\nImportant : This class should not be mistaken with the native EventTarget class Elements, Window and Document inherit from.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 63,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#constructor",
    "access": "public",
    "description": "This MUST be called by sub-classes to instantiate the correct properties where events are stored.",
    "lineNumber": 19
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "[EVENTS]",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#[EVENTS]",
    "access": "private",
    "description": "",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "[LISTEN_TARGETS]",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#[LISTEN_TARGETS]",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "on",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#on",
    "access": "public",
    "description": "Register an event handler for a type",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the event. A custom human readable string."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The function that will be invoked when the event is triggered. No signature is provided, it is up to the developer to determine what is passed to the listener at trigger time"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "context",
        "description": "The object the listener will called on. Defaults to `this` and can be changed if event delegation is needed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "once",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#once",
    "access": "public",
    "description": "Register an event handler that will trigger only once",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the event. A custom human readable string."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The function that will be invoked when the event is triggered. No signature is provided, it is up to the developer to determine what is passed to the listener at trigger time"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "context",
        "description": "The object the listener will called on. Defaults to `this` and can be changed if event delegation is needed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "off",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#off",
    "access": "public",
    "description": "Remove event handler, either of one type, or just one listener",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the event. A custom human readable string."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "handler",
        "description": "The event handler to be removed. If unspecififed, all handlers of the supplied type are removed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "listenTo",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#listenTo",
    "access": "public",
    "description": "Utility to allow EventTargets to listen to other EventTarget's events easily",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "handle objects like in `on`"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The instance of EventTarget to listen to events on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the event. A custom human readable string."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The function that will be invoked when the event is triggered. No signature is provided, it is up to the developer to determine what is passed to the listener at trigger time"
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "stopListening",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#stopListening",
    "access": "public",
    "description": "Stop listening for events on another EventTarget",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The instance of EventTarget to stop receiving events from."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the event. A custom human readable string."
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "hasListeners",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#hasListeners",
    "access": "public",
    "description": "Determine if this object has events registered of a certain type",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} if the EventTarget has listeners for this type of event"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Event type to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "if the EventTarget has listeners for this type of event"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "trigger",
    "memberof": "src/core/EventTarget.js~EventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/EventTarget.js~EventTarget#trigger",
    "access": "public",
    "description": "Trigger an event on this object",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The event type who's listeners will be triggered"
      },
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "eventParams",
        "description": "The parameters to be passed to the listening objects. Any number can be passed but it is recomended to only pass a single event object on which you may attach multiple properties."
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/core/WindowManager.js",
    "content": "import defaults from 'lodash/defaults';\nimport throttle from 'lodash/throttle';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isObject from 'lodash/isObject';\nimport find from 'lodash/find';\nimport findLast from 'lodash/findLast';\n\nimport EventTarget  from './EventTarget';\n\n// Cross platform function to get scroll position\nconst getScrollTop = function () {\n    return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n};\n\nconst getScrollLeft = function () {\n    return window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\n};\n\nlet WindowManager;\n\nclass WindowManagerClass extends EventTarget{\n\n    constructor() {\n        // Singleton check\n        if ( WindowManager ) {\n            throw new Error(\"WindowManager is a Singleton, an instance already exists\");\n        }\n\n        super();\n    }\n\n    /* ==========================\n\n     Initialization function\n\n     ========================== */\n    initialize (config) {\n\n        if ( !this.initialized ) {\n            this.config = defaults(config || {}, WindowManagerClass.defaultConfig);\n\n            /**\n             * Array of breakpoints. You can not change breakpoints once they are set\n             * @type {Array}\n             */\n            this.breakpoints = this.config.breakpoints;\n\n            // Freeze breakpoints\n            this.breakpoints.forEach( bp => Object.freeze(bp) );\n\n            // Create and save Event Handlers\n            this._domEvents = {};\n            this._domEvents.resize  = throttle(this._resizeHandler.bind(this), this.config.resizeThrottle);\n            this._domEvents.load    = this._loadHandler.bind(this);\n            this._domEvents.unload  = this._unloadHandler.bind(this);\n            this._domEvents.scroll  = throttle( this._scrollHandler.bind(this), this.config.scrollThrottle);\n\n            // listen for events\n            window.addEventListener('resize', this._domEvents.resize);\n            window.addEventListener('load',   this._domEvents.load);\n            window.addEventListener('unload', this._domEvents.unload);\n\n            this.bindScrollEvent();\n\n            // set up variable tracking\n            this.scrollPosition = this.scrollPosition || {top: getScrollTop()};\n\n            // cache window metrics now\n            this._updateMetrics();\n            this._updateScrollMetrics();\n\n            this._detectBreakpoint(true);\n\n            this.initialized = true;\n\n        }\n\n    }\n\n    /* ==========================\n\n     Public Members\n\n     ========================== */\n\n    // Allow scroll event to be detached from window. Useful for virtual scrolling. (shout out to MG, he'll love it)\n    /**\n     * Start listening for native window scroll events\n     */\n    bindScrollEvent() {\n        window.addEventListener('scroll', this._domEvents.scroll);\n    }\n\n    /**\n     * Stop listening for native window scroll events\n     */\n    unbindScrollEvent() {\n        window.removeEventListener('scroll', this._domEvents.scroll);\n    }\n\n    /**\n     * Scroll to this position in the window. Updates the internal variables.\n     * @param {number} y - Move scroll to to here\n     * @param {number} x - Move scroll left to here.\n     */\n    scrollTo(y = 0, x = 0) {\n\n        this.scrollPosition.top = y;\n        this.scrollPosition.left = x;\n\n        window.scrollTo(x, y);\n    }\n\n    /**\n     * Determine if the viewport is of a a minimum width\n     *\n     * @param {Object|String|Number} breakpoint - If of type object, assumes to be a named breakpoint object with a value property.\n     *  If a string, a named breakpoint's name. If a number the breakpoint's value. A number maybe used to arbitrarily check window width\n     * @returns {boolean} if the viewport is at least of breakpoint size.\n     */\n    minWidth(breakpoint) {\n\n        // Get numerical value for breakpoint\n        let breakpointValue;\n        if ( isNumber(breakpoint) ) {\n            breakpointValue = breakpoint;\n        } else if ( isString(breakpoint) ) {\n            breakpointValue = find( this.breakpoints, {name: breakpoint}).value;\n        } else if ( isObject(breakpoint) ) {\n            breakpointValue = breakpoint.value;\n        }\n\n        return this.width >= breakpointValue;\n    }\n\n    /* ==========================\n\n     Private Members\n\n     ========================== */\n    /**\n     * Save the window metrics to this object\n     * @private\n     */\n    _updateMetrics() {\n        this.width = window.document.documentElement.clientWidth;\n        this.height = window.document.documentElement.clientHeight;\n    }\n\n    /**\n     * Update internal var that tracks the scroll position\n     * @private\n     */\n    _updateScrollMetrics() {\n        this.scrollPosition.top = getScrollTop();\n        this.scrollPosition.left = getScrollLeft();\n    }\n\n    /**\n     * Called on window resize events to detect which breakpoint we're on\n     *\n     * @param {Boolean} [suppressEvents=false] - Do not trigger a breakpoint event when a change is detected\n     * @private\n     */\n    _detectBreakpoint(suppressEvents = false) {\n\n        // find biggest matching BP\n        let breakpoint = findLast(this.breakpoints, (bp) => {\n            return this.width >= bp.value;\n        });\n\n        // ony if the breakpoint has changed\n        if (this.currentBreakpoint !== breakpoint) {\n            let previousBreakpoint = this.currentBreakpoint;\n            this.currentBreakpoint = breakpoint;\n\n            // dispatch event for breakpoint, simply cloning the BP object for the event data\n            if (!suppressEvents) {\n                this.trigger('breakpoint', {breakpoint: breakpoint, previous : previousBreakpoint}); // TODO make breakpoints immutable\n            }\n        }\n\n    }\n\n    /* ==========================\n\n     Event Handlers\n\n     ========================== */\n    /**\n     * Internal window scroll handler. This call is throttled\n     * @param event\n     * @private\n     */\n    _scrollHandler(event) {\n        var previousTop = this.scrollPosition.top;\n        this._updateScrollMetrics();\n        var currentTop = this.scrollPosition.top;\n\n        // determine direction by comparing previous scroll position\n        var direction = (previousTop < currentTop) ? 1 : -1;\n\n        // trigger custom event\n        this.trigger('scroll', {scrollPosition: this.scrollPosition, direction : direction, originalEvent: event});\n    }\n\n    /**\n     * Internal window resize handler. This call is throttled\n     * @private\n     */\n    _resizeHandler() {\n        this._updateMetrics();\n        this.trigger('resize', {width: this.width, height: this.height});\n        this._detectBreakpoint();\n    }\n\n    /**\n     * Called when the window unloads\n     * @private\n     */\n    _unloadHandler() {\n        this.trigger('unload');\n    }\n\n    /**\n     * Forward the window load event\n     * @private\n     */\n    _loadHandler() {\n        this.trigger('load');\n    }\n\n}\n\nWindowManagerClass.defaultConfig = {\n    scrollThrottle: 15, // number of ms between scroll events\n    resizeThrottle: 50, // number of ms between resize events\n    disableScrollClass: null, // class name to use for the disable scroll class. default is to apply styles directly\n    disableUserInputClass: null, // class name to use for the disable user input class. default is to apply styles directly\n};\n\n// Create our Singleton\nWindowManager = new WindowManagerClass();\n\n// Export singleton by default and Class if introspection needed\nexport {WindowManager as default, WindowManagerClass};\n",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/core/WindowManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "getScrollTop",
    "memberof": "src/core/WindowManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/WindowManager.js~getScrollTop",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/core/WindowManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "getScrollLeft",
    "memberof": "src/core/WindowManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/WindowManager.js~getScrollLeft",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/core/WindowManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "class",
    "name": "WindowManagerClass",
    "memberof": "src/core/WindowManager.js",
    "static": true,
    "longname": "src/core/WindowManager.js~WindowManagerClass",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/core/WindowManager.js",
    "importStyle": "{WindowManagerClass}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ]
  },
  {
    "__docId__": 78,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "config",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#config",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "breakpoints",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#breakpoints",
    "access": "public",
    "description": "Array of breakpoints. You can not change breakpoints once they are set",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "_domEvents",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_domEvents",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "scrollPosition",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#scrollPosition",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "initialized",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#initialized",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "bindScrollEvent",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#bindScrollEvent",
    "access": "public",
    "description": "Start listening for native window scroll events",
    "lineNumber": 91,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "unbindScrollEvent",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#unbindScrollEvent",
    "access": "public",
    "description": "Stop listening for native window scroll events",
    "lineNumber": 98,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "scrollTo",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#scrollTo",
    "access": "public",
    "description": "Scroll to this position in the window. Updates the internal variables.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Move scroll to to here"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Move scroll left to here."
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "minWidth",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#minWidth",
    "access": "public",
    "description": "Determine if the viewport is of a a minimum width",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} if the viewport is at least of breakpoint size."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "breakpoint",
        "description": "If of type object, assumes to be a named breakpoint object with a value property.\n If a string, a named breakpoint's name. If a number the breakpoint's value. A number maybe used to arbitrarily check window width"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "if the viewport is at least of breakpoint size."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "_updateMetrics",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_updateMetrics",
    "access": "private",
    "description": "Save the window metrics to this object",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "width",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#width",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "height",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#height",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "_updateScrollMetrics",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_updateScrollMetrics",
    "access": "private",
    "description": "Update internal var that tracks the scroll position",
    "lineNumber": 155,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "_detectBreakpoint",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_detectBreakpoint",
    "access": "private",
    "description": "Called on window resize events to detect which breakpoint we're on",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "suppressEvents",
        "description": "Do not trigger a breakpoint event when a change is detected"
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "currentBreakpoint",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#currentBreakpoint",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "_scrollHandler",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_scrollHandler",
    "access": "private",
    "description": "Internal window scroll handler. This call is throttled",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "_resizeHandler",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_resizeHandler",
    "access": "private",
    "description": "Internal window resize handler. This call is throttled",
    "lineNumber": 212,
    "params": [],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "_unloadHandler",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_unloadHandler",
    "access": "private",
    "description": "Called when the window unloads",
    "lineNumber": 222,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "_loadHandler",
    "memberof": "src/core/WindowManager.js~WindowManagerClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WindowManager.js~WindowManagerClass#_loadHandler",
    "access": "private",
    "description": "Forward the window load event",
    "lineNumber": 230,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/display/AspectRatio.js",
    "content": "    const AspectRatio = {\n\n    FIT_MODE: {\n        COVER: 'cover',\n        CONTAIN: 'contain'\n    },\n\n    /**\n     * Fits content to containers, either covering or containing them\n     * @param content object describing a rectangle\n     * @param container object describuing a rectangle\n     * @param fitMode cover or contain content in container. refers to static properties of AspectRatio object\n     */\n    fitContent : function (content, container, fitMode = AspectRatio.FIT_MODE.COVER) {\n\n        // calc ratios to decide how to do covering or containing\n        const contentRatio = content.width / content.height;\n        const containerRatio = container.width / container.height;\n\n        let computedWidth;\n        let computedHeight;\n\n        // fit to width / height\n        if ( (contentRatio < containerRatio && fitMode === AspectRatio.FIT_MODE.COVER) || (contentRatio > containerRatio && fitMode === AspectRatio.FIT_MODE.CONTAIN) ) {\n            computedWidth   = container.width;\n            computedHeight  = container.width / contentRatio;\n        } else {\n            computedWidth   = container.height * contentRatio;\n            computedHeight  = container.height;\n        }\n\n        const computedY = (container.height - computedHeight) / 2;\n        const computedX = (container.width - computedWidth) / 2;\n\n        // return new rect with proper values\n        return {\n            y : computedY,\n            x : computedX,\n            width : computedWidth,\n            height : computedHeight\n        };\n\n    }\n\n};\n\n\nexport default AspectRatio;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/AspectRatio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "AspectRatio",
    "memberof": "src/display/AspectRatio.js",
    "static": true,
    "longname": "src/display/AspectRatio.js~AspectRatio",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/AspectRatio.js",
    "importStyle": "AspectRatio",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"FIT_MODE\": *, \"fitContent\": *}"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/display/BaseView.js",
    "content": "// Third party dependencies\nimport isElement from 'lodash/isElement';\nimport isString from 'lodash/isString';\nimport isUndefined from 'lodash/isUndefined';\nimport isFunction from 'lodash/isFunction';\nimport isEqual from 'lodash/isEqual';\nimport filter from 'lodash/filter';\nimport each from 'lodash/each';\nimport clone from 'lodash/clone';\nimport includes from 'lodash/includes';\nimport findLast from 'lodash/findLast';\n\n\n// Zimple dependencies\nimport EventTarget from '../core/EventTarget';\nimport WindowManager from '../core/WindowManager';\n\n/**\n * BaseView is the base class for organizing the DOM. It extends EventTarget to allow event based communication between\n * Views and their parents or other parts of the application that also inherit from EventTarget.\n *\n * BaseView enables easily adding DOM Events by doing the book keeping and allowing for event delegation.\n */\nclass BaseView extends EventTarget {\n\n    /**\n     *\n     * @param {Element} el - The Element this view is responsible for. Saved to this.el, a View is always responsible\n     *      For a single root element. The view can then split up it's contained elements with subviews\n     * @param {Object} options - An object of options for the view\n     * @param {Array} options.breakpoints - An array of breakpoint objects the view uses. If this options is specified,\n     *      the `breakpointChanged` function will only be called with breakpoints specified here, otherwise it will be called\n     *      for every breakpoint change.\n     */\n    constructor(el, options = {}) {\n\n        super();\n\n        // Check supplied el parameter\n        if ( !el ) {\n            throw new Error('You must specify a root element for the View');\n        } else if ( !isElement(el) ) {\n            throw new Error('Supplied `el` argument needs to be a DOMElement');\n        }\n\n        // Save supplied values\n        this.el = el;\n        this.options = options;\n\n        // Breakpoint handling\n        if (this.options.breakpoints) { // react only breakpoints specified in the options\n            this.breakpoints = filter( WindowManager.breakpoints, (bp) => includes(this.options.breakpoints, bp.name) );\n\n        } else { // use all breakpoints\n            this.breakpoints = clone( WindowManager.breakpoints );\n        }\n\n        // on first instantiation of any BaseView, bind the WindowManager.breakpoint handler\n        if ( !BaseView.instances.length ) {\n            WindowManager.on('breakpoint', breakpointHandler);\n        }\n\n        // Save newly created instance to static array.\n        BaseView.instances.push( this );\n\n        // detect first breakpoint\n        this.currentBreakpoint = findLast(this.breakpoints, (bp) => WindowManager.width >= bp.value );\n\n    }\n\n    /**\n     * Function is called when breakpoint is changed\n     */\n    breakpointChanged() {\n\n    }\n\n    /**\n     *  Bind a DOMEvent to the view, optionally filtered on the selector.\n     *\n     * @param {String} type - Event typoe\n     * @param {Function(event)} listener - Event listener function that will be scoped to this view\n     * @param {String|Element} [selector=this.el] - If selector is a String, the string will be used to test matching using\n     *      delegated events to `this.el`. If it's an Element then bind event directly to that element.\n     *      Binding directly to an element is usefull for events that don't bubble. (form submit, for example)\n     */\n    addDomEvent(type, listener, selector = null) {\n\n        // init domEvents registry if not present\n        this._domEvents = this._domEvents || {};\n\n        // init registry for this type\n        this._domEvents[type] = this._domEvents[type] || [];\n\n        // Check selector is either a valid string or an element\n        if ( selector && !( (isString(selector) && selector !== 'all') || isElement(selector) )) {\n            throw new Error('Invalid selector passed to addDomEvent. Must be String or DOMElement. Can not be \"all\"');\n        }\n\n        // check we have a function to bind to.\n        if ( !isFunction(listener) ) {\n            throw new Error('no event listener function specified for addDomEvent');\n        }\n\n        // if the selector is an element, add event to it, otherwise use this.el for event delegation\n        let target = isElement(selector) ? selector : this.el;\n\n        // create internal listener that will be saved\n        let internalListener = (event) => {\n\n            // init a flag to indicate if a selector has been found\n            let inSelector = false;\n\n            // create element iterator that will climb up the DOM.\n            let iterEl;\n\n            if ( !selector ) {\n                inSelector = true; // if no selector specified, always trigger\n            } else {\n\n                iterEl = event.target;\n\n                if (isString(selector)) {\n\n                    while (iterEl !== this.el) {\n\n                        // when clicking on SVG <use> tags in IE,\n                        // the event.target is actually the declaration element, and not the actual <use> tag\n                        // in that case, switch reference to the actual <use /> tag\n                        if (\"correspondingUseElement\" in iterEl) {\n                            iterEl = iterEl.correspondingUseElement;\n                        }\n\n                        // .matches does't exist on SVG elements in old IE\n                        if ( 'matches' in iterEl && iterEl.matches(selector)) {\n                            inSelector = true;\n                            break;\n                        } else {\n                            iterEl = iterEl.parentNode;\n                        }\n                    }\n\n                } else if (isElement(selector)) { // If selector is an Element, then it is our target and will always match\n                    iterEl = selector;\n                    inSelector = true;\n                }\n            }\n\n            if (inSelector) {\n                // Add found selector to event and transparently trigger our listener\n                event.delegateTarget = iterEl;\n                listener.apply(this, [event]);\n            }\n\n        };\n\n        // Native dom event\n        target.addEventListener(type, internalListener);\n\n        // Save event object\n        this._domEvents[type].push({target : target, listener: internalListener});\n    }\n\n    /**\n     * Remove DOM event from the element\n     * @param {Element} target - The element to remove events from\n     * @param {String} [type='all'] - The DOM event Type. Special keyword 'all' removes all event types\n     */\n    removeDomEvent(target = null, type = 'all') {\n\n        if (this._domEvents) {\n\n            let events;\n            if (isUndefined(type) || type === 'all') {\n                events = this._domEvents; // remove all events if no type is specified\n            } else {\n                events = {};\n                events[type] = this._domEvents[type];\n            }\n\n            // for each event type\n            each(events, (eventListeners, iterType) => {\n\n                // we don't want to modify the array in place during the loop, so save removed event listeners to an array\n                let removed = [];\n\n                // loop over listener objects and remove\n                each(eventListeners, (listenerObj, i) => {\n\n                    if ( !target || listenerObj.target == target) {\n                        listenerObj.target.removeEventListener(iterType, listenerObj.listener);\n                        removed.push( i );\n                    }\n\n                });\n\n                // remove of listener objects now\n                removed.forEach( (i) => {\n                    eventListeners.splice(i);\n                });\n\n                // Delete the object if there are no more listeners for this type\n                if ( !eventListeners || eventListeners.length == 0) {\n                    delete this._domEvents[iterType];\n                }\n\n            });\n        }\n\n    }\n\n    /**\n     * Remove all DOM event listeners and remove the View element from the DOM. This function is used when we want to\n     * remove the element from the DOM but want the view to stay in memory\n     */\n    remove() {\n        this.removeDomEvent();\n        this.off();\n        // Might not still be attached to DOM\n        if (this.el.parentNode) {\n            this.el.parentNode.removeChild(this.el);\n        }\n    }\n\n    /**\n     * Removes DOM Element and DOM events. Unbinds other Events.\n     * Call this to clean up the view before de-referencing it.\n     */\n    destroy() {\n        this.stopListening();\n        this.remove();\n\n        // Remove from internal list of instances\n        BaseView.instances.splice( BaseView.instances.indexOf(this), 1);\n\n    }\n\n    find(selector) {\n        return this.el.querySelector(selector);\n    }\n\n    findAll(selector) {\n        return Array.from( this.el.querySelectorAll(selector) );\n    }\n\n    /**\n     * Dummy function to implement resizing\n     */\n    resize() {\n\n    }\n\n    /**\n     * Test to see if the viewport is currently at a certain breakpoint\n     *\n     * Proxies WindowManager.minWidth\n     *\n     * @param breakpoint {Number|String|Object} a breakpoint name, object or numerical value. See WindowManager.minWidth for more info\n     * @returns {boolean}\n     */\n    minWidth(breakpoint) {\n        return WindowManager.minWidth( breakpoint );\n    }\n\n}\n\n/**\n * Static array of instances\n * @static\n * @private\n * @type {Array<BaseView>}\n */\nBaseView.instances = [];\n\n/**\n * Single event handler from WindowManager breakpoint event. Handles calling of breakpointChanged on each instance if applicable\n * @private\n * @static\n * @param event\n */\nfunction breakpointHandler(event) {\n    for (let instance of BaseView.instances) {\n        // get the max breakpoint this instance handles\n        let usedBreakpoint = findLast(instance.breakpoints, (bp) => event.breakpoint.value >= bp.value );\n\n        // Check it's not the current breakpoint and invoke breakpointChanged method\n        if ( !isEqual(usedBreakpoint, instance.currentBreakpoint) ) {\n            instance.currentBreakpoint = usedBreakpoint;\n            instance.breakpointChanged( usedBreakpoint, event.previous );\n        }\n    }\n}\n\n\nexport default BaseView;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/BaseView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "breakpointHandler",
    "memberof": "src/display/BaseView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/BaseView.js~breakpointHandler",
    "access": "private",
    "export": false,
    "importPath": "zimple/src/display/BaseView.js",
    "importStyle": null,
    "description": "Single event handler from WindowManager breakpoint event. Handles calling of breakpointChanged on each instance if applicable",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "BaseView",
    "memberof": "src/display/BaseView.js",
    "static": true,
    "longname": "src/display/BaseView.js~BaseView",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/BaseView.js",
    "importStyle": "BaseView",
    "description": "BaseView is the base class for organizing the DOM. It extends EventTarget to allow event based communication between\nViews and their parents or other parts of the application that also inherit from EventTarget.\n\nBaseView enables easily adding DOM Events by doing the book keeping and allowing for event delegation.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ]
  },
  {
    "__docId__": 104,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The Element this view is responsible for. Saved to this.el, a View is always responsible\n     For a single root element. The view can then split up it's contained elements with subviews"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "An object of options for the view"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "options.breakpoints",
        "description": "An array of breakpoint objects the view uses. If this options is specified,\n     the `breakpointChanged` function will only be called with breakpoints specified here, otherwise it will be called\n     for every breakpoint change."
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "el",
    "memberof": "src/display/BaseView.js~BaseView",
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#el",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "options",
    "memberof": "src/display/BaseView.js~BaseView",
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#options",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "breakpoints",
    "memberof": "src/display/BaseView.js~BaseView",
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#breakpoints",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "currentBreakpoint",
    "memberof": "src/display/BaseView.js~BaseView",
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#currentBreakpoint",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "breakpointChanged",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#breakpointChanged",
    "access": "public",
    "description": "Function is called when breakpoint is changed",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "addDomEvent",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#addDomEvent",
    "access": "public",
    "description": " Bind a DOMEvent to the view, optionally filtered on the selector.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Event typoe"
      },
      {
        "nullable": null,
        "types": [
          "Function(event)"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "Event listener function that will be scoped to this view"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Element"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.el",
        "defaultRaw": "this.el",
        "name": "selector",
        "description": "If selector is a String, the string will be used to test matching using\n     delegated events to `this.el`. If it's an Element then bind event directly to that element.\n     Binding directly to an element is usefull for events that don't bubble. (form submit, for example)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "_domEvents",
    "memberof": "src/display/BaseView.js~BaseView",
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#_domEvents",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "removeDomEvent",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#removeDomEvent",
    "access": "public",
    "description": "Remove DOM event from the element",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to remove events from"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'all'",
        "defaultRaw": "'all'",
        "name": "type",
        "description": "The DOM event Type. Special keyword 'all' removes all event types"
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "remove",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#remove",
    "access": "public",
    "description": "Remove all DOM event listeners and remove the View element from the DOM. This function is used when we want to\nremove the element from the DOM but want the view to stay in memory",
    "lineNumber": 216,
    "params": [],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#destroy",
    "access": "public",
    "description": "Removes DOM Element and DOM events. Unbinds other Events.\nCall this to clean up the view before de-referencing it.",
    "lineNumber": 229,
    "params": [],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "find",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#find",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [
      {
        "name": "selector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "findAll",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#findAll",
    "access": "public",
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "params": [
      {
        "name": "selector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "resize",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#resize",
    "access": "public",
    "description": "Dummy function to implement resizing",
    "lineNumber": 249,
    "params": [],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "minWidth",
    "memberof": "src/display/BaseView.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/BaseView.js~BaseView#minWidth",
    "access": "public",
    "description": "Test to see if the viewport is currently at a certain breakpoint\n\nProxies WindowManager.minWidth",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "breakpoint",
        "description": "{Number|String|Object} a breakpoint name, object or numerical value. See WindowManager.minWidth for more info"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/display/ContainerView.js",
    "content": "// Third party dependencies\nimport includes from 'lodash/includes';\n\n// Zimple Depedencies\nimport BaseView from './BaseView';\n\n\n/**\n * A view that can contain other views.\n * Automatically call resize/breakpointChanged/destroy on children.\n */\nclass ContainerView extends BaseView {\n\n    /**\n     * See super declaration. This view also instantiates a subview array\n     * @param el\n     * @param options\n     */\n    constructor(el, options) {\n\n        super(el, options);\n\n        /**\n         * An array of contained sub views\n         * @type {Array}\n         * @private\n         */\n        this._subViews = [];\n\n    }\n\n    /* ==========================\n\n     Public Methods\n\n     ========================== */\n\n    /**\n     * Destroy\n     */\n    destroy() {\n\n        // destroy and unregister all sub views\n        this._subViews.forEach( view => {\n            view.destroy();\n            this._unregisterSubView(view);\n        });\n\n        // after this view is done, call super destroyer to do the real cleanup\n        super.destroy();\n\n    }\n\n    /**\n     * Call resize for all the sub-views\n     */\n    resize() {\n        this._subViews.forEach( (view) => view.resize() );\n        super.resize();\n\n    }\n\n\n    /* ==========================\n\n     Private Methods\n\n     ========================== */\n\n    /**\n     *\n     * @param {BaseView} view - the sub-view to register with this as a parent\n     * @private\n     */\n    _registerSubView(view ) {\n\n        if ( !(view instanceof BaseView) ) {\n            throw new Error('Attempting to add a sub-view to the container that does not inherit from BaseView');\n        }\n\n        // only one copy of each view\n        if ( !includes(this._subViews, view) ) {\n            this._subViews.push(view);\n        }\n\n        if ( !this.el.contains( view.el ) ) {\n            console.warn('Adding sub-view who\\'s DOM element isn\\'t contained in this.el')\n        }\n    }\n\n    /**\n     *  Remove sub-view from internal array\n     * @param view\n     * @private\n     */\n    _unregisterSubView(view ) {\n        let viewIndex = this._subViews.indexOf( view );\n\n        if (viewIndex > -1) {\n            this._subViews.splice(viewIndex,1);\n        }\n    }\n\n}\n\nexport default ContainerView;\n",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/ContainerView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "ContainerView",
    "memberof": "src/display/ContainerView.js",
    "static": true,
    "longname": "src/display/ContainerView.js~ContainerView",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/ContainerView.js",
    "importStyle": "ContainerView",
    "description": "A view that can contain other views.\nAutomatically call resize/breakpointChanged/destroy on children.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/display/BaseView.js~BaseView"
    ]
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/display/ContainerView.js~ContainerView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ContainerView.js~ContainerView#constructor",
    "access": "public",
    "description": "See super declaration. This view also instantiates a subview array",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_subViews",
    "memberof": "src/display/ContainerView.js~ContainerView",
    "static": false,
    "longname": "src/display/ContainerView.js~ContainerView#_subViews",
    "access": "private",
    "description": "An array of contained sub views",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/display/ContainerView.js~ContainerView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ContainerView.js~ContainerView#destroy",
    "access": "public",
    "description": "Destroy",
    "lineNumber": 41,
    "params": [],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "resize",
    "memberof": "src/display/ContainerView.js~ContainerView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ContainerView.js~ContainerView#resize",
    "access": "public",
    "description": "Call resize for all the sub-views",
    "lineNumber": 57,
    "params": [],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "_registerSubView",
    "memberof": "src/display/ContainerView.js~ContainerView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ContainerView.js~ContainerView#_registerSubView",
    "access": "private",
    "description": "",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "the sub-view to register with this as a parent"
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "_unregisterSubView",
    "memberof": "src/display/ContainerView.js~ContainerView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ContainerView.js~ContainerView#_unregisterSubView",
    "access": "private",
    "description": " Remove sub-view from internal array",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/display/ScrollingTracker.js",
    "content": "import isElement from 'lodash/isElement';\nimport debounce from 'lodash/debounce';\nimport findIndex from 'lodash/findIndex';\n\nimport EventTarget from '../core/EventTarget';\nimport WindowManager from '../utils/WindowManager';\nimport Style from '../utils/Style';\nimport getDocumentRect from '../display/getDocumentRect';\n\nclass Tracker extends EventTarget {\n\n    constructor(el, offset = 1) {\n        super();\n\n        this.el = el;\n        this.offset = offset;\n        this.side = null;\n        this.state = null;\n\n    }\n\n}\n\n\n/**\n *\n *  Scrolling tracker allows us to know when an element is off screen, overlapping the screen or completely on screen.\n *  It also allows us to know which side the center of the element is (top or bottom) *\n *\n * @todo untrack elements\n *\n */\nclass ScrollingTracker extends EventTarget {\n\n    constructor(scrollContainer = window) {\n        super();\n\n        /**\n         * @type {Window}\n         */\n        this.scrollContainer = scrollContainer;\n\n        this._trackers = [];\n\n        if (scrollContainer === window) {\n            this.listenTo( WindowManager, 'scroll', this._windowScrollHandler);\n        } else {\n            // create our own scroll handler if scrolling an element\n            this._scrollHandler = this._windowScrollHandler.bind( this );\n            scrollContainer.addEventListener( 'scroll', this._scrollHandler );\n        }\n\n        this.listenTo( WindowManager, 'resize', this._windowResizeHandler);\n\n    }\n\n    /*\n\n     Public methods\n\n     */\n\n    /**\n     * Start tracking the scrollPosition of an element\n     * @param {Element} el - The element to track.\n     * @param {Number} offset - A ratio of the total height\n     * @returns {Tracker} A tracker object that will emit events\n     */\n    trackElement(el, offset = 1) {\n\n        let tracker = new Tracker(el, offset);\n\n        this._trackers.push( tracker );\n\n        this.refreshElementMetrics(tracker);\n\n        this._update(false);\n\n        return tracker;\n\n    }\n\n    untrackElement(elOrTracker) {\n\n        let trackerIndex;\n\n        if (elOrTracker instanceof Tracker) {\n            trackerIndex = this._trackers.indexOf( elOrTracker );\n        } else {\n            trackerIndex = findIndex(this._trackers, {el: elOrTracker});\n        }\n\n    }\n\n    /**\n     *\n     * @param {Element|Tracker} elOrTracker - Element or Tracker object that needs to be refreshed\n     */\n    refreshElementMetrics(elOrTracker) {\n\n        let trackers;\n\n        if ( !elOrTracker ) {\n            trackers = this._trackers;\n        } else if ( isElement(elOrTracker)  ) {\n            trackers = this._trackers.find(tracker => tracker === elOrTracker);\n        } else if ( elOrTracker instanceof Tracker ) {\n            trackers = [elOrTracker];\n        }\n\n\n        trackers.forEach( tracker => {\n\n            // Save & remove transforms\n            const isInlineTransformStyle = /transform\\s*:\\s*[a-z0-9]+/i.test( tracker.el.getAttribute('style') );\n            const isInlineTransitionStyle = /transition\\s*:\\s*[a-z0-9]+/i.test( tracker.el.getAttribute('style') );\n\n            const currentTransform  = Style.get( tracker.el, 'transform' );\n            const currentTransition = Style.get( tracker.el, 'transition' );\n\n            Style.set( tracker.el, {\n                transform : 'none',\n                transition : 'none'\n            });\n\n            // Measure and save metrics to tracker\n            const elementMetrics = getDocumentRect(tracker.el);\n\n            // apply offset\n            const height = elementMetrics.height * tracker.offset;\n            const top = elementMetrics.top +    ((elementMetrics.height - height) / 2);\n\n            tracker.top = top;\n            tracker.height = height;\n\n            // re-apply Transforms and transitions if they were removed\n            if (currentTransform && isInlineTransformStyle) {\n                Style.set(tracker.el, {transform: currentTransform});\n            } else {\n                tracker.el.style.removeProperty('transform');\n            }\n\n            if (currentTransition || isInlineTransitionStyle) {\n                Style.set(tracker.el, {transition: currentTransition});\n            } else {\n                tracker.el.style.removeProperty('transition');\n            }\n\n\n\n        });\n\n        this._update(false);\n\n    }\n\n    /*\n\n    Private methods\n\n     */\n\n    _getScrollContainerScrollTop() {\n        return (this.scrollContainer === window ) ? WindowManager.scrollPosition.top : this.scrollContainer.scrollTop;\n    }\n\n    _getScrollContainerHeight() {\n        return (this.scrollContainer === window ) ? WindowManager.height : this.scrollContainer.offsetHeight;\n    }\n\n    _update(triggerEvents = true) {\n\n        let screenTop = this._getScrollContainerScrollTop();\n        let screenHeight = this._getScrollContainerHeight();\n        let screenBottom = screenTop + this._getScrollContainerHeight();\n\n        this._trackers.forEach( tracker => {\n\n            let currentState = tracker.state;\n            let currentSide = tracker.side;\n            let newState;\n            let newSide;\n\n            let trackerTop = tracker.top;\n            let trackerBottom = tracker.top + tracker.height;\n\n            // State checking :\n\n            // Check if element is OFF screen\n            if (screenBottom < trackerTop || // off and below\n                screenTop > trackerBottom) {  // off and above\n\n                newState = ScrollingTracker.STATE.OFF;\n\n            // Check if element is OVERLAPPING the screen\n            } else if ((screenTop < trackerTop && screenBottom < trackerBottom) || // overlap bottom\n                (screenTop > trackerTop && screenTop < trackerBottom) && // overlap above\n                !(screenTop > trackerTop && screenBottom < trackerBottom )) { // when an element is higher than  the screen, this avoids it never becoming on {\n\n                newState = ScrollingTracker.STATE.OVERLAP;\n\n            // If element is neither OFF or OVERLAPPING, it must be ON\n            } else {\n                newState = ScrollingTracker.STATE.ON;\n            }\n\n            // Side checking :\n            newSide = ( trackerTop + (tracker.height * 0.5) < screenTop + (screenHeight * 0.5) ) ? ScrollingTracker.SIDE.ABOVE : ScrollingTracker.SIDE.BELOW;\n\n            // Determine if state or side has actually changed\n            let updateState = (newState !== currentState);\n            let updateSide = (newSide !== currentSide);\n\n            // save values to tracker before emitting events for consistency.\n            tracker.state = newState;\n            tracker.side = newSide;\n\n            if (triggerEvents) {\n\n                if (updateState) {\n                    let eventObject = {\n                        state : newState,\n                        target: tracker\n                    };\n\n                    tracker.trigger('state', eventObject);\n                    tracker.trigger(`state:${newState}`, eventObject);\n                    this.trigger('element:state', eventObject);\n                }\n\n                if (updateSide) {\n\n                    let eventObject = {\n                        side : newSide,\n                        target : tracker\n                    };\n\n                    tracker.trigger('side', eventObject);\n                    tracker.trigger(`side:${newSide}`, eventObject);\n                    this.trigger('element:side', eventObject);\n                }\n            }\n\n        });\n\n    }\n\n\n    /*\n\n    Event handlers\n\n     */\n\n    // TODO rename because of div scrolling support\n    _windowScrollHandler(event) {\n        this._update();\n    }\n\n    _windowResizeHandler(event) {\n        this.refreshElementMetrics();\n    }\n\n}\n\n// Position relateive to the viewport\nScrollingTracker.STATE = {\n    ON: 'on',\n    OFF: 'off',\n    OVERLAP: 'overlap'\n};\n\n// Side, determine if the element is below or above the screen. This also depends on the element height\nScrollingTracker.SIDE = {\n    ABOVE: 'above',\n    BELOW: 'below'\n};\n\nScrollingTracker.DIRECTION = {\n    UP: -1,\n    DOWN: 1\n};\n\nexport {ScrollingTracker as default, Tracker};",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/ScrollingTracker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "ScrollingTracker",
    "memberof": "src/display/ScrollingTracker.js",
    "static": true,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/display/ScrollingTracker.js",
    "importStyle": null,
    "description": "\n Scrolling tracker allows us to know when an element is off screen, overlapping the screen or completely on screen.\n It also allows us to know which side the center of the element is (top or bottom) *",
    "lineNumber": 33,
    "todo": [
      "untrack elements"
    ],
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ],
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "scrollContainer",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#scrollContainer",
    "access": "public",
    "description": "",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Window"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "_trackers",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#_trackers",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "_scrollHandler",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#_scrollHandler",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "trackElement",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#trackElement",
    "access": "public",
    "description": "Start tracking the scrollPosition of an element",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Tracker} A tracker object that will emit events"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element to track."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "A ratio of the total height"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tracker"
      ],
      "spread": false,
      "description": "A tracker object that will emit events"
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "untrackElement",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#untrackElement",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "elOrTracker",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "refreshElementMetrics",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#refreshElementMetrics",
    "access": "public",
    "description": "",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "Tracker"
        ],
        "spread": false,
        "optional": false,
        "name": "elOrTracker",
        "description": "Element or Tracker object that needs to be refreshed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "_getScrollContainerScrollTop",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#_getScrollContainerScrollTop",
    "access": "private",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "_getScrollContainerHeight",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#_getScrollContainerHeight",
    "access": "private",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "_update",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#_update",
    "access": "private",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "triggerEvents",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "_windowScrollHandler",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#_windowScrollHandler",
    "access": "private",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "_windowResizeHandler",
    "memberof": "src/display/ScrollingTracker.js~ScrollingTracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~ScrollingTracker#_windowResizeHandler",
    "access": "private",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "Tracker",
    "memberof": "src/display/ScrollingTracker.js",
    "static": true,
    "longname": "src/display/ScrollingTracker.js~Tracker",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/ScrollingTracker.js",
    "importStyle": "{Tracker}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ]
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/display/ScrollingTracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/ScrollingTracker.js~Tracker#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "el",
    "memberof": "src/display/ScrollingTracker.js~Tracker",
    "static": false,
    "longname": "src/display/ScrollingTracker.js~Tracker#el",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "offset",
    "memberof": "src/display/ScrollingTracker.js~Tracker",
    "static": false,
    "longname": "src/display/ScrollingTracker.js~Tracker#offset",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "side",
    "memberof": "src/display/ScrollingTracker.js~Tracker",
    "static": false,
    "longname": "src/display/ScrollingTracker.js~Tracker#side",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "state",
    "memberof": "src/display/ScrollingTracker.js~Tracker",
    "static": false,
    "longname": "src/display/ScrollingTracker.js~Tracker#state",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/display/SplitText.js",
    "content": "import defaults from 'lodash/defaults';\nimport trim from 'lodash/trim';\nimport isArray from 'lodash/isArray';\nimport isElement from 'lodash/isElement';\nimport identity from 'lodash/identity';\n\n\n/**\n A class to split up lines, words and characters into divs and spans.\n\n First it will parse the element's content and store it in nested arrays (see below). It will then empty the div and replace it with divs and spans\n\n The internal representation of the split text :\n ```\n [\n [\n 'l',\n 'i',\n 'n',\n 'e'\n ],\n <br />,\n [\n 'w',\n 'o',\n 'r',\n 'd'\n ],\n [\n 'w',\n 'o',\n 'r',\n 'd'\n ]\n ]\n ```\n\n */\nclass SplitText {\n\n    /**\n     * @param {Element} el - Element who's content will be split\n     * @param {Object} options - Options for splitting the text\n     */\n    constructor(el, options = {}) {\n\n        this.el = el;\n\n        defaults(options, SplitText.defaultOptions);\n\n        // Save filter functions\n\n        /**\n         * When the output is being built, pass every word element through this function\n         * @type {function(word: Element): Element}\n         */\n        this.wordFilter = options.wordFilter;\n\n        /**\n         * When the output is being built, pass every char element through this function\n         * @type {function(char: Element): Element}\n         */\n        this.charFilter = options.charFilter;\n\n        /**\n         * The CSS class to add to line elements\n         * @type {string}\n         */\n        this.lineClass = options.lineClass;\n\n        /**\n         * The CSS class to add to word elements\n         * @type {string}\n         */\n        this.wordClass = options.wordClass;\n\n        /**\n         * The CSS class to add to char elements\n         * @type {string}\n         */\n        this.charClass = options.charClass;\n\n        /**\n         * Save a string representation of the element's original content\n         * @type {string}\n         * @private\n         */\n        this._originalHTML = this.el.innerHTML;\n\n        /**\n         * Parsed nodes of the content\n         * @type {Array}\n         * @private\n         */\n        this._parsedNodes = this._parseNodeContent(this.el);\n\n        // Add class to the element.\n        this.el.classList.add('split-text');\n\n        // Change content to rendererd string.\n        this.el.innerHTML = this._renderString();\n\n    }\n\n\n    /**\n     * Remove elements generated by text splitting process and re-inject original contents\n     */\n    reset() {\n        this.el.innerHTML = this._originalHTML;\n        this.el.classList.remove('split-text');\n    }\n\n    /**\n     * Return the composed HTML of split text\n     * @returns {String}\n     * @private\n     */\n    _renderString() {\n\n        let render = this._parsedNodes.reduce((rendered, currentItem) => {\n            let nodeHTML;\n            if (isArray(currentItem)) { // if it's an array, then create word from it\n                nodeHTML = this._createWord(currentItem).outerHTML + ' '; // MUST include a space after the word or all the words will be treated as one long word\n            } else if (isElement(currentItem)) {\n\n                if (currentItem.tagName.toLowerCase() === 'br') { // If it's a BR, start a new line but do not copy BR\n                    nodeHTML = `</div><div class=\"${this.lineClass}\">`;\n                } else {\n                    nodeHTML = currentItem.outerHTML; // otherwise copy HTML straight to rendered content\n                }\n\n            }\n            return rendered + nodeHTML;\n        }, `<div class=\"${this.lineClass}\">`); // start reduce with a new .line element\n\n        // Close line\n        render += '</div>';\n\n        return render;\n\n    }\n\n    /**\n     * Create an element for the character. passing through an optional filter and adding a CSS class name\n     *\n     * @param {String} content - Single char to create an element for\n     * @returns {Element} element representing a single character\n     * @private\n     */\n    _createChar(content) {\n        let char = document.createElement('span');\n        char.className = this.charClass;\n        char.textContent = content;\n        return this.charFilter(char);\n    }\n\n    /**\n     * Returns a span containing multiple characters, passed to the createChar function.\n     *\n     * @param {Array} charArray - Array of characters\n     * @returns {Element} an element containing multiple char elements\n     * @private\n     */\n    _createWord(charArray) {\n        let word = document.createElement('span');\n        word.className = this.wordClass;\n        // set the whole HTML of the word by mapping each char to a div, and reducting them to a string;\n        word.innerHTML = charArray.map((char) => this._createChar(char)).reduce((fullWord, char) => fullWord + char.outerHTML, '');\n        return this.wordFilter(word);\n    }\n\n    /**\n     * Loop over element returning an array of elements and words. Each word is an array of chars.\n     *\n     * @param {Element} el - The element to parse\n     * @returns {Array} An array of chars or nested words\n     * @todo handle recursion\n     */\n    _parseNodeContent(el) {\n        let children = el.childNodes;\n        let parsedNodes = [];\n\n        for (let i = 0; i < children.length; i++) {\n            let node = children[i];\n\n            if (node.nodeType == 1) { // node is Element\n\n                parsedNodes.push(node); // TODO handle recursion if node has child nodes\n\n            } else if (node.nodeType == 3) { // node is text node\n\n                // trim off excess white space\n                let nodeValue = trim(node.nodeValue);\n\n                // don't parse empty nodes\n                if (nodeValue.length > 0) {\n                    // split a text node into specific words\n                    let words = nodeValue.split(/\\s/);\n\n                    // for each word, add an array of it's character\n                    words.forEach((word) => {\n                        parsedNodes.push(word.split(''));\n                    });\n                }\n            }\n        }\n\n        return parsedNodes;\n    }\n\n}\n\n/**\n * @static\n * @type {{wordFilter: function, charFilter: function, lineClass: string, wordClass: string, charClass: string}}\n */\nSplitText.defaultOptions = {\n    wordFilter: identity,\n    charFilter: identity,\n    lineClass: 'line',\n    wordClass: 'word',\n    charClass: 'char'\n};\n\n\nexport default SplitText;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/SplitText.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "SplitText",
    "memberof": "src/display/SplitText.js",
    "static": true,
    "longname": "src/display/SplitText.js~SplitText",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/SplitText.js",
    "importStyle": "SplitText",
    "description": "A class to split up lines, words and characters into divs and spans.\n\nFirst it will parse the element's content and store it in nested arrays (see below). It will then empty the div and replace it with divs and spans\n\nThe internal representation of the split text :\n```\n[\n[\n'l',\n'i',\n'n',\n'e'\n],\n<br />,\n[\n'w',\n'o',\n'r',\n'd'\n],\n[\n'w',\n'o',\n'r',\n'd'\n]\n]\n```",
    "lineNumber": 39,
    "interface": false
  },
  {
    "__docId__": 150,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/display/SplitText.js~SplitText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "Element who's content will be split"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options for splitting the text"
      }
    ]
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "el",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#el",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "wordFilter",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#wordFilter",
    "access": "public",
    "description": "When the output is being built, pass every word element through this function",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "function(word: Element): Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "charFilter",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#charFilter",
    "access": "public",
    "description": "When the output is being built, pass every char element through this function",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "function(char: Element): Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "lineClass",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#lineClass",
    "access": "public",
    "description": "The CSS class to add to line elements",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "wordClass",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#wordClass",
    "access": "public",
    "description": "The CSS class to add to word elements",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "charClass",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#charClass",
    "access": "public",
    "description": "The CSS class to add to char elements",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "_originalHTML",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#_originalHTML",
    "access": "private",
    "description": "Save a string representation of the element's original content",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "_parsedNodes",
    "memberof": "src/display/SplitText.js~SplitText",
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#_parsedNodes",
    "access": "private",
    "description": "Parsed nodes of the content",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "reset",
    "memberof": "src/display/SplitText.js~SplitText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#reset",
    "access": "public",
    "description": "Remove elements generated by text splitting process and re-inject original contents",
    "lineNumber": 109,
    "params": [],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_renderString",
    "memberof": "src/display/SplitText.js~SplitText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#_renderString",
    "access": "private",
    "description": "Return the composed HTML of split text",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "_createChar",
    "memberof": "src/display/SplitText.js~SplitText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#_createChar",
    "access": "private",
    "description": "Create an element for the character. passing through an optional filter and adding a CSS class name",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element} element representing a single character"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Single char to create an element for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "element representing a single character"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "_createWord",
    "memberof": "src/display/SplitText.js~SplitText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#_createWord",
    "access": "private",
    "description": "Returns a span containing multiple characters, passed to the createChar function.",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element} an element containing multiple char elements"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "charArray",
        "description": "Array of characters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "an element containing multiple char elements"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "_parseNodeContent",
    "memberof": "src/display/SplitText.js~SplitText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/SplitText.js~SplitText#_parseNodeContent",
    "access": "private",
    "description": "Loop over element returning an array of elements and words. Each word is an array of chars.",
    "lineNumber": 180,
    "todo": [
      "handle recursion"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of chars or nested words"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element to parse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of chars or nested words"
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/display/Style.js",
    "content": "import capitalize from 'lodash/capitalize';\nimport find from 'lodash/find';\nimport isElement from 'lodash/isElement';\nimport isString from 'lodash/isString';\n\n// browser prefixes\nconst PREFIXES = [\n    'Webkit',\n    'Moz',\n    'MS',\n    'O'\n];\n\n// Cache of modifier functions once the proper prefix has been found\nconst prefixedModifierCache = {};\n\n// Test element for finding prefixed properties\nconst prefixTestEl = document.createElement('div');\n\n/**\n * Create a prefixed aware CSS modifier for a property.\n *\n * Generated modifiers are stored in the cache declared above\n *\n * @param property\n * @private\n * @returns {function}\n */\nfunction createModifier(property) {\n\n    // get all prefixed properties (and un-prefixed in first position). prefixed properties are camel cased\n    let prefixedProperties = [property].concat( PREFIXES.map( prefix => prefix + capitalize(property) ) );\n\n    // find the first acceptable property name\n    let prefixedPropName = find(prefixedProperties, (prop) => prop in prefixTestEl.style);\n\n    // cache modifier to object\n    prefixedModifierCache[property] = function(targetStyle, value) {\n        targetStyle[prefixedPropName] = value;\n    };\n\n    return prefixedModifierCache[property];\n}\n\n/**\n * Style util to help setting and getting style properties\n *\n * @todo accept shorthand transform properties like x,y,scale,rotate.\n * @type {{set: Style.set, get: Style.get, addUnits: Style.addUnits, stripUnits: Style.stripUnits}}\n */\nconst Style = {\n\n    /**\n     * Set styles on an Element\n     *\n     * @param {Element} element - The element on which to set styles. Can also be the Element's style object directly.\n     * @param {Object} properties - Object with properties as keys and values as\n     */\n    set : function (element, properties) {\n\n        let elementStyles = ( isElement(element) ) ? element.style : element;\n\n        // treat properties as an object of csspropertyname : value pairs\n        for ( let prop in properties) {\n            if (properties.hasOwnProperty(prop)) {\n\n                // if a the value of this properties isn't already a string, format it.\n                let specifiedValue = properties[prop];\n                let finalValue;\n\n                if (specifiedValue !== null) {\n                    finalValue = isString(specifiedValue) ? specifiedValue : this.addUnits(prop, specifiedValue);\n                } else {\n                    finalValue = null;\n                }\n\n                // get cached or new modifier function and use it to modify element styles\n                ( prefixedModifierCache[prop] || createModifier(prop) )(elementStyles, finalValue);\n            }\n        }\n\n    },\n\n    /**\n     * Get style applied to this element\n     *\n     * TODO check on element.style object if we can detect !important rules someway\n     *\n     * @param element\n     * @param property\n     * @returns {string|number} the CSS value\n     */\n    get : function(element, property) {\n        return this.stripUnits(property, window.getComputedStyle( element )[ property ] );\n    },\n\n    /**\n     * Add units to the CSS value if possible. usefull for specifying pixel values as numbers\n     *\n     * @param {string} property - name of the CSS property\n     * @param {string|number} value - value of the property that isn't a String\n     * @param {string} [units='px'] - CSS unit for the value.\n     * @returns {string} Value with appropriate units. be\n     */\n    addUnits : function(property, value, units = 'px') {\n\n        let formattedValue;\n\n        switch(property) {\n            case 'top' :\n            case 'right' :\n            case 'bottom' :\n            case 'left' :\n            case 'minWidth' :\n            case 'minHeight' :\n            case 'width' :\n            case 'height' :\n                formattedValue = value.toString() + units;\n                break;\n\n            case 'opacity' :\n                formattedValue = value;\n                break;\n        }\n\n        // format to empty string\n        if ( formattedValue === null ) formattedValue = '';\n\n        return formattedValue;\n    },\n\n    /**\n     * Strip units and return as a number if possible, otherwise return a string\n     *\n     * @param {string} property - the CSS property name\n     * @param {*} value - CSS value as read from the browser.\n     * @return {string|number} CSS value cast to number if possible\n     */\n    stripUnits : function (property, value) {\n\n        let formattedValue;\n\n        switch(property) {\n            case 'top' :\n            case 'right' :\n            case 'bottom' :\n            case 'left' :\n            case 'minWidth' :\n            case 'minHeight' :\n            case 'width' :\n            case 'height' :\n            case 'opacity' :\n                formattedValue = parseFloat( value );\n                break;\n        }\n\n        return formattedValue\n\n    }\n\n};\n\nexport default Style;\n",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/Style.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "PREFIXES",
    "memberof": "src/display/Style.js",
    "static": true,
    "longname": "src/display/Style.js~PREFIXES",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/display/Style.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "prefixedModifierCache",
    "memberof": "src/display/Style.js",
    "static": true,
    "longname": "src/display/Style.js~prefixedModifierCache",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/display/Style.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "prefixTestEl",
    "memberof": "src/display/Style.js",
    "static": true,
    "longname": "src/display/Style.js~prefixTestEl",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/display/Style.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "createModifier",
    "memberof": "src/display/Style.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/Style.js~createModifier",
    "access": "private",
    "export": false,
    "importPath": "zimple/src/display/Style.js",
    "importStyle": null,
    "description": "Create a prefixed aware CSS modifier for a property.\n\nGenerated modifiers are stored in the cache declared above",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "Style",
    "memberof": "src/display/Style.js",
    "static": true,
    "longname": "src/display/Style.js~Style",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/Style.js",
    "importStyle": "Style",
    "description": "Style util to help setting and getting style properties",
    "lineNumber": 51,
    "todo": [
      "accept shorthand transform properties like x,y,scale,rotate."
    ],
    "type": {
      "nullable": null,
      "types": [
        "{set: Style.set, get: Style.get, addUnits: Style.addUnits, stripUnits: Style.stripUnits}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/display/animation/SpriteAnimator.js",
    "content": "// UZIK Depedencies\nimport BaseView from '../BaseView';\nimport ImageLoader from '../../net/ImageLoader';\n\n// Hidden consts\n\n/**\n *\n *\n *\n */\nclass SpriteAnimator extends BaseView {\n\n    constructor(el, options) {\n\n        super(el, options);\n\n        /**\n         * Save rendering context reference\n         * @type {CanvasRenderingContext2D}\n         */\n        this.drawingContext = this.el.getContext('2d');\n\n        // HiDPI support\n        this.drawingContext.scale( 1, 1);\n\n        /**\n         * Calc frame duration with FPS.\n         * @type {number}\n         */\n        this.frameDuration = 1000 / options.fps;\n\n        /**\n         * Get total number of frames. We can't calc this automatically.\n         * @type {number}\n         */\n        this.numFrames = options.numFrames;\n\n        /**\n         * Loop in point is the frame to loop from. If this value is -1, the sprite will not loop\n         * @type {number}\n         */\n        this.loop = (options.loop === false) ? -1 : (options.loop || 0);\n\n        this.width = this.el.width;\n        this.height = this.el.height;\n\n        this._currentFrame = 0;\n        this.isPlaying = false;\n\n        this.imageLoader = new ImageLoader( options.url );\n        this.imageLoader.promise.then( (img) => {\n\n            this.source = img.data;\n\n            this.sourceCols = Math.floor( this.source.width / this.width);\n            this.sourceRows = Math.floor( this.source.height / this.height);\n\n            if (options.autoplay || this._playAfterLoad) {\n                this.play();\n            }\n        });\n\n    }\n\n    /* ==========================\n\n     Getters and setters\n\n     ========================== */\n\n    get currentFrames() {\n        return this._currentFrame;\n    }\n\n    set currentFrame(value) {\n        this._currentFrame = value - 1;\n        this._render();\n    }\n\n    /* ==========================\n\n     Public Methods\n\n     ========================== */\n\n    play() {\n        if ( this.imageLoader.status !== 'complete' ) {\n            this._playAfterLoad = true;\n            return;\n        }\n\n        this.isPlaying = true;\n\n        if ( !this.queuedFrame ) {\n            this.queuedFrame = requestAnimationFrame( () => {\n                if ( isNaN(this.lastRender) || Date.now() - this.lastRender > this.frameDuration) {\n                    this._render();\n                }\n\n                this.queuedFrame = null; // empty ref\n                if (this.isPlaying) this.play();\n            });\n        }\n    }\n\n    pause() {\n\n        this.isPlaying = false;\n\n        if (this.queuedFrame) {\n            window.cancelAnimationFrame( this.queuedFrame );\n            this.queuedFrame = null;\n            this._playAfterLoad = false; // in case the sprite is played and paused before load\n        }\n    }\n\n    destroy() {\n        this.pause();\n        super.destroy();\n    }\n\n\n    /* ==========================\n\n     Private Methods\n\n     ========================== */\n\n    _render() {\n        let frame = this._currentFrame + 1;\n\n        if (frame >= this.numFrames - 1) {\n\n            if (this.loop < 0) {\n                this.pause();\n                this._currentFrame = 0;\n                return;\n            } else {\n                frame = this.loop;\n            }\n\n        }\n\n        this.drawingContext.clearRect(0, 0, this.width, this.height);\n\n        let x = Math.floor( frame % this.sourceCols);\n        let y = Math.floor( frame / this.sourceCols );\n\n        this.drawingContext.drawImage(\n            this.source,\n            x * this.width,\n            y * this.height,\n            this.width,\n            this.height,\n            0,0, this.width, this.height\n        );\n\n        this._currentFrame = frame;\n        this.lastRender = Date.now();\n    }\n\n\n    /* ==========================\n\n     Event Handlers\n\n     ========================== */\n    _childClickHandler() {\n\n    }\n\n\n}\n\nexport default SpriteAnimator;\n",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/animation/SpriteAnimator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "class",
    "name": "SpriteAnimator",
    "memberof": "src/display/animation/SpriteAnimator.js",
    "static": true,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/animation/SpriteAnimator.js",
    "importStyle": "SpriteAnimator",
    "description": "",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/display/BaseView.js~BaseView"
    ]
  },
  {
    "__docId__": 172,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "drawingContext",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#drawingContext",
    "access": "public",
    "description": "Save rendering context reference",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "frameDuration",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#frameDuration",
    "access": "public",
    "description": "Calc frame duration with FPS.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "numFrames",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#numFrames",
    "access": "public",
    "description": "Get total number of frames. We can't calc this automatically.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "loop",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#loop",
    "access": "public",
    "description": "Loop in point is the frame to loop from. If this value is -1, the sprite will not loop",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "width",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#width",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "height",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#height",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "_currentFrame",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#_currentFrame",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "isPlaying",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#isPlaying",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "imageLoader",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#imageLoader",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "source",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#source",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "sourceCols",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#sourceCols",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "sourceRows",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#sourceRows",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "get",
    "name": "currentFrames",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#currentFrames",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "set",
    "name": "currentFrame",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#currentFrame",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "play",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#play",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_playAfterLoad",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#_playAfterLoad",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "queuedFrame",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#queuedFrame",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "pause",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#pause",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "_render",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#_render",
    "access": "private",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "lastRender",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#lastRender",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "_childClickHandler",
    "memberof": "src/display/animation/SpriteAnimator.js~SpriteAnimator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/display/animation/SpriteAnimator.js~SpriteAnimator#_childClickHandler",
    "access": "private",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/display/dom/empty.js",
    "content": "/**\n * Simple function to empty an element\n * @param {Element} el - DOMElement to empty by removing all it's children.\n */\nconst empty = function (el) {\n    while ( el.firstChild ) el.removeChild(el.firstChild);\n};\n\nexport default empty",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/dom/empty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "empty",
    "memberof": "src/display/dom/empty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/dom/empty.js~empty",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/dom/empty.js",
    "importStyle": "empty",
    "description": "Simple function to empty an element",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "DOMElement to empty by removing all it's children."
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "src/display/dom/getScrollParent.js",
    "content": "/**\n * Find the first parent that is scrollable. in most cases this will be the document itself.\n * @param {Element} el - The element we need to find the scroll parent for\n * @returns {Element}\n */\nfunction getScrollParent(el) {\n\n    // Default is HTML tag (or body tag in iOS). IE doesn't support scrollingElement\n    let scrollParent = document.scrollingElement || document.documentElement;\n\n    let elIter = el;\n    while( elIter.parentNode && elIter !== document.documentElement ) {\n        elIter = elIter.parentNode;\n\n        if ( /(auto|scroll)/.test(window.getComputedStyle( elIter ).overflowY) ) {\n            scrollParent = elIter;\n            break;\n        }\n    }\n\n    return scrollParent;\n}\n\nexport default getScrollParent;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/dom/getScrollParent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "getScrollParent",
    "memberof": "src/display/dom/getScrollParent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/dom/getScrollParent.js~getScrollParent",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/dom/getScrollParent.js",
    "importStyle": "getScrollParent",
    "description": "Find the first parent that is scrollable. in most cases this will be the document itself.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element we need to find the scroll parent for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/display/dom/index.js",
    "content": "import isArray from 'lodash/isArray';\nimport isElement from 'lodash/isElement';\nimport isString from 'lodash/isString';\nimport indexOf from 'lodash/indexOf';\nimport findIndex from 'lodash/findIndex';\n\n\n/**\n * Get index of searchCriteria in a collection of nodes (default is searchCritera's siblings\n * @param {Element|string} searchCriteria - An element or CSS selector to find an element\n * @param {Array<Element>} collection - The array of nodes to search in.\n * @returns {number} Index of the search criteria or -1 if the searchCritera was not found in this collection\n */\nconst index = function (searchCriteria, collection) {\n\n    let index = -1;\n\n    // if collection parameter isn't present or an element, assume we want to find it's place among the other children of it's parent.\n    if ( !collection || !isElement(collection) ) {\n        collection = Array.from(searchCriteria.parentNode.children);\n    }\n\n    // check the collection is an array\n    if (isArray(collection)) {\n\n        // search as literal object\n        if (isElement(searchCriteria)) {\n            index = indexOf(collection, searchCriteria);\n            // search as CSS selector\n        } else if (isString(searchCriteria)) {\n            index = findIndex(collection, (item) => item.matches(searchCriteria) );\n        } else {\n            throw new Error('Search criteria must be an element or a String');\n        }\n    } else {\n        throw new Error('Trying to get an index in a non-Array collection')\n    }\n\n    return index;\n\n};\n\nexport default index;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/dom/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "index",
    "memberof": "src/display/dom/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/dom/index.js~index",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/dom/index.js",
    "importStyle": "index",
    "description": "Get index of searchCriteria in a collection of nodes (default is searchCritera's siblings",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Index of the search criteria or -1 if the searchCritera was not found in this collection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchCriteria",
        "description": "An element or CSS selector to find an element"
      },
      {
        "nullable": null,
        "types": [
          "Array<Element>"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "The array of nodes to search in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Index of the search criteria or -1 if the searchCritera was not found in this collection"
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/display/dom/removeClasses.js",
    "content": "/**\n * Remove multiple classes from an Element. Supports removing classes with `*` wildcard\n *\n * @param {Element} el - DOM element to remove classes from\n * @param {...string} patterns - One or more class patterns. Patterns must be CSS class names but can also contain `*` as a wildcard.\n */\nconst removeClasses = function (el, ...patterns) {\n\n    // save classes to avoid transforming the className of the el multiple times\n    let classes = el.className;\n\n    patterns.forEach( (pattern) => {\n\n        // replace wildcard with regex, add space matcher after for elements with multiple classes\n        let patternRegex = new RegExp( pattern.replace('*', '[a-zA-Z0-9-_]+') + '\\\\s?' );\n\n        // remove classes using Regex\n        classes = classes.replace( patternRegex, '' )\n\n    } );\n\n    // re assign new classes to the element\n    el.className = classes;\n\n};\n\nexport default removeClasses;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/dom/removeClasses.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "removeClasses",
    "memberof": "src/display/dom/removeClasses.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/dom/removeClasses.js~removeClasses",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/dom/removeClasses.js",
    "importStyle": "removeClasses",
    "description": "Remove multiple classes from an Element. Supports removing classes with `*` wildcard",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "DOM element to remove classes from"
      },
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "patterns",
        "description": "One or more class patterns. Patterns must be CSS class names but can also contain `*` as a wildcard."
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/display/dom/stringToElement.js",
    "content": "/**\n * Turns a string representing one or more DOM elements into usable objects.\n * @param {string} sourceString\n * @returns {Element|DocumentFragment} The DOM representation of the string. If multiple root tags are present in the\n *     string, it will return a DocumentFragment\n */\nconst stringToElement = function (sourceString) {\n    // create a dummy element that is used\n    let elementIterator = document.createElement(\"div\");\n    let i;\n\n    // Throw the string into HTML\n    elementIterator.innerHTML = sourceString;\n\n    // If there are multiple root elements.\n    if ( elementIterator.children.length > 1 ) { // return document fragment\n        let docFrag = document.createDocumentFragment();\n        while (i = elementIterator.firstChild ) {\n            docFrag.appendChild(i)\n        }\n\n        return docFrag;\n\n    } else { // just return first element\n        return elementIterator.firstElementChild;\n    }\n\n};\n\nexport default stringToElement;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/dom/stringToElement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "stringToElement",
    "memberof": "src/display/dom/stringToElement.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/dom/stringToElement.js~stringToElement",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/dom/stringToElement.js",
    "importStyle": "stringToElement",
    "description": "Turns a string representing one or more DOM elements into usable objects.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element|DocumentFragment} The DOM representation of the string. If multiple root tags are present in the\n    string, it will return a DocumentFragment"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element",
        "DocumentFragment"
      ],
      "spread": false,
      "description": "The DOM representation of the string. If multiple root tags are present in the\n    string, it will return a DocumentFragment"
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/display/getDocumentRect.js",
    "content": "import getScrollParent from './dom/getScrollParent';\n\nconst getDocumentRect = function(el) {\n\n    let elRect = el.getBoundingClientRect();\n\n    const scrollEl = getScrollParent( el );\n\n    return {\n        top : elRect.top + scrollEl.scrollTop,\n\n        left: elRect.left + scrollEl.scrollLeft,\n\n        width   : elRect.width,\n        height  : elRect.height,\n\n        right   : elRect.right + scrollEl.scrollLeft,\n        bottom  : elRect.bottom + scrollEl.scrollTop\n    };\n\n};\n\nexport default getDocumentRect;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/display/getDocumentRect.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "getDocumentRect",
    "memberof": "src/display/getDocumentRect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/display/getDocumentRect.js~getDocumentRect",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/display/getDocumentRect.js",
    "importStyle": "getDocumentRect",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "el",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"top\": *, \"left\": *, \"width\": *, \"height\": *, \"right\": *, \"bottom\": *}"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/geometry/Point.js",
    "content": "\n\n\nclass Point {\n\n    constructor(x, y, angle = NaN, distance = NaN) {\n        this.x = x;\n        this.y = y;\n\n        // Save optional angle and distance\n        this.angle = angle;\n        this.distance = distance;\n\n    }\n\n    toPolar() {\n\n        // calculate polar coordinates if they weren't supplied to the constructor\n        if ( isNaN(this.angle) || isNaN(this.distance) ) {\n            this.distance = Math.sqrt(  Math.pow(this.x, 2) + Math.pow(this.y, 2) );\n            this.angle = Math.atan2( this.y, this.x );\n        }\n\n        return {\n            angle : this.angle,\n            distance : this.distance\n        };\n    }\n\n}\n\n\n/**\n *\n * @param {Point} a\n * @param {Point} b\n */\nPoint.distance = function (a, b) {\n    let x = (b.x - a.x);\n    let y = (b.y - a.y);\n    return Math.sqrt( (x*x) + (y*y) );\n};\n\nexport default Point;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/geometry/Point.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "distance",
    "memberof": "src/geometry/Point.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/geometry/Point.js~distance",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/geometry/Point.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "Point",
    "memberof": "src/geometry/Point.js",
    "static": true,
    "longname": "src/geometry/Point.js~Point",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/geometry/Point.js",
    "importStyle": "Point",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/geometry/Point.js~Point",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/geometry/Point.js~Point#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "x",
    "memberof": "src/geometry/Point.js~Point",
    "static": false,
    "longname": "src/geometry/Point.js~Point#x",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "y",
    "memberof": "src/geometry/Point.js~Point",
    "static": false,
    "longname": "src/geometry/Point.js~Point#y",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "angle",
    "memberof": "src/geometry/Point.js~Point",
    "static": false,
    "longname": "src/geometry/Point.js~Point#angle",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "distance",
    "memberof": "src/geometry/Point.js~Point",
    "static": false,
    "longname": "src/geometry/Point.js~Point#distance",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "toPolar",
    "memberof": "src/geometry/Point.js~Point",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/geometry/Point.js~Point#toPolar",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"angle\": *, \"distance\": *}"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "src/index.js",
    "content": "// TODO include all modules here in objects as packages for simplicity ?",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/input/Keyboard.js",
    "content": "import EventTarget from '../core/EventTarget';\n\n/**\n * Keyboard class provides a small abstraction layer to make Keyboard events more EventTarget friendly\n *\n */\nclass Keyboard extends EventTarget {\n\n    /**\n     *\n     * @param {Element} [target=window.document] - The element to listen to events to. Defaults to the document.\n     */\n    constructor(target = window.document) {\n        super();\n\n        /**\n         * DOM event target\n         * @type {Element}\n         */\n        this.target = target;\n\n        /**\n         * @private\n         */\n        this._keyboardEvents = {\n            press   : this._keyPressHandler.bind( this ),\n            down    : this._keyDownHandler.bind( this )\n        };\n\n        target.addEventListener('keypress', this._keyboardEvents.press);\n        target.addEventListener('keydown', this._keyboardEvents.down);\n\n    }\n\n    /**\n     * Stop listening for events\n     */\n    destroy() {\n        this.target.removeEventListener('keypress', this._keyboardEvents.press);\n        this.target.removeEventListener('keydown', this._keyboardEvents.down);\n    }\n\n    /**\n     * Keypress handler\n     * @param {Event} event - DOM Event object\n     * @emits {Event} Native event\n     * @private\n     */\n    _keyPressHandler(event) {\n        // forward event\n        this.trigger('press', event);\n    }\n\n    /**\n     * Keydown event. Adds symbol to event object before forwarding it.\n     * @param {Event} event - DOM event\n     * @emits {Event} Native event\n     * @private\n     */\n    _keyDownHandler(event) {\n\n        // get char\n        event.symbol = Keyboard.codes[ event.keyCode ];\n\n        // save latest points\n        this.trigger('down', event);\n    }\n\n}\n\n// constant type values for comparison\nKeyboard.keys = {};\nKeyboard.keys.ESC       = 27;\n\n// Inverse lookup for keyboard values;\nKeyboard.codes = [];\nKeyboard.codes[ 27 ]    = 'ESC';\n\n\nexport default Keyboard;\n",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/input/Keyboard.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "Keyboard",
    "memberof": "src/input/Keyboard.js",
    "static": true,
    "longname": "src/input/Keyboard.js~Keyboard",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/input/Keyboard.js",
    "importStyle": "Keyboard",
    "description": "Keyboard class provides a small abstraction layer to make Keyboard events more EventTarget friendly",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ]
  },
  {
    "__docId__": 229,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/input/Keyboard.js~Keyboard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Keyboard.js~Keyboard#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "window.document",
        "defaultRaw": "window.document",
        "name": "target",
        "description": "The element to listen to events to. Defaults to the document."
      }
    ]
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "target",
    "memberof": "src/input/Keyboard.js~Keyboard",
    "static": false,
    "longname": "src/input/Keyboard.js~Keyboard#target",
    "access": "public",
    "description": "DOM event target",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "_keyboardEvents",
    "memberof": "src/input/Keyboard.js~Keyboard",
    "static": false,
    "longname": "src/input/Keyboard.js~Keyboard#_keyboardEvents",
    "access": "private",
    "description": "",
    "lineNumber": 25,
    "type": {
      "types": [
        "{\"press\": *, \"down\": *}"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/input/Keyboard.js~Keyboard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Keyboard.js~Keyboard#destroy",
    "access": "public",
    "description": "Stop listening for events",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "_keyPressHandler",
    "memberof": "src/input/Keyboard.js~Keyboard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Keyboard.js~Keyboard#_keyPressHandler",
    "access": "private",
    "description": "Keypress handler",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "DOM Event object"
      }
    ],
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "Native event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "_keyDownHandler",
    "memberof": "src/input/Keyboard.js~Keyboard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Keyboard.js~Keyboard#_keyDownHandler",
    "access": "private",
    "description": "Keydown event. Adds symbol to event object before forwarding it.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "DOM event"
      }
    ],
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "Native event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "src/input/Mouse.js",
    "content": "import EventTarget from '../core/EventTarget';\n\n/**\n * Mouse class provides a small abstraction layer to make Mouse events more EventTarget friendly\n *\n * @todo handle dragging\n *\n */\nclass Mouse extends EventTarget {\n\n    /**\n     * @param {Element|Window} target - Object to listen for mouse events on.\n     */\n    constructor(target = window) {\n        super();\n\n        /**\n         * DOM event target\n         * @type {Element|Window}\n         */\n        this.target = target;\n\n        this.position = {\n            x : 0,\n            y : 0\n        };\n\n        // setup events\n        this._mouseEvents = {\n            move : this._mouseMoveHandler.bind( this )\n        };\n\n        target.addEventListener('mousemove', this._mouseEvents.move);\n\n    }\n\n    /**\n     * Remove DOM events and cleanup.\n     */\n    destroy() {\n        this.target.removeEventListener('mousemove', this._mouseEvents.move);\n    }\n\n    /**\n     * Saves the current mouse current client position before forwarding the event\n     *\n     * @param {MouseEvent} event - The native DOM event\n     * @emits {MouseEvent} event - The native DOM event\n     * @private\n     */\n    _mouseMoveHandler(event) {\n\n        // save latest points\n        this.position = {\n            x : event.clientX,\n            y : event.clientY\n        };\n\n        this.trigger('move', event);\n\n    }\n\n}\n\nexport default Mouse;\n",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/input/Mouse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "class",
    "name": "Mouse",
    "memberof": "src/input/Mouse.js",
    "static": true,
    "longname": "src/input/Mouse.js~Mouse",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/input/Mouse.js",
    "importStyle": "Mouse",
    "description": "Mouse class provides a small abstraction layer to make Mouse events more EventTarget friendly",
    "lineNumber": 9,
    "todo": [
      "handle dragging"
    ],
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ]
  },
  {
    "__docId__": 237,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/input/Mouse.js~Mouse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Mouse.js~Mouse#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "Window"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "Object to listen for mouse events on."
      }
    ]
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "target",
    "memberof": "src/input/Mouse.js~Mouse",
    "static": false,
    "longname": "src/input/Mouse.js~Mouse#target",
    "access": "public",
    "description": "DOM event target",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Element",
        "Window"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "position",
    "memberof": "src/input/Mouse.js~Mouse",
    "static": false,
    "longname": "src/input/Mouse.js~Mouse#position",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "_mouseEvents",
    "memberof": "src/input/Mouse.js~Mouse",
    "static": false,
    "longname": "src/input/Mouse.js~Mouse#_mouseEvents",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{\"move\": *}"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/input/Mouse.js~Mouse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Mouse.js~Mouse#destroy",
    "access": "public",
    "description": "Remove DOM events and cleanup.",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_mouseMoveHandler",
    "memberof": "src/input/Mouse.js~Mouse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Mouse.js~Mouse#_mouseMoveHandler",
    "access": "private",
    "description": "Saves the current mouse current client position before forwarding the event",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The native DOM event"
      }
    ],
    "emits": [
      {
        "types": [
          "MouseEvent"
        ],
        "description": "event - The native DOM event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/input/Touch.js",
    "content": "import first from 'lodash/first';\nimport last from 'lodash/last';\nimport defaults from 'lodash/defaults';\n\nimport EventTarget from '../core/EventTarget';\n\n/**\n *\n * These constants represent gestures that the touch instance will try to match\n *\n *\n */\nconst GESTURES_DEFINITIONS = {\n\n    /*\n\n     SWIPE DETECTOR\n\n     */\n    'swipe': {\n        detect: function (events, options) {\n\n            let detection = null;\n\n            // only detect swipes with multiple events\n            if (events.length > 1) {\n                let firstEvent = first(events);\n                let lastEvent = last(events);\n\n                // Swipe with one finger only.\n                if (!isMultiTouch(firstEvent) && !isMultiTouch(lastEvent)) {\n\n                    let deltaX = lastEvent.touches[0].screenX - firstEvent.touches[0].screenX;\n                    let deltaY = lastEvent.touches[0].screenY - firstEvent.touches[0].screenY;\n\n                    let aDeltaX = Math.abs(deltaX);\n                    let aDeltaY = Math.abs(deltaY);\n\n                    // determine direction by comparison\n                    if (aDeltaX > (2 * aDeltaY) && aDeltaX > options.swipeThreshold) {\n\n                        detection = {\n                            axis: 'x',\n                            distance: {\n                                x: deltaX,\n                                y: deltaY\n                            }\n                        }\n\n                    } else if ( options.verticalSwipe && aDeltaY > (2 * aDeltaX)) {\n\n                        detection = {\n                            axis: 'y',\n                            distance: {\n                                x: deltaX,\n                                y: deltaY\n                            }\n                        }\n\n                    }\n\n                }\n            }\n\n            return detection;\n        },\n        dispatchEvent(target, eventData) {\n\n            // create event\n            let swipeEvent = document.createEvent('CustomEvent');\n            swipeEvent.initCustomEvent('swipe', true, false, null);\n            swipeEvent.distance = eventData.distance;\n            swipeEvent.axis = eventData.axis;\n\n            // dispatch it through the DOM\n            target.dispatchEvent(swipeEvent);\n\n        },\n        repeat: false\n    },\n\n    /*\n\n     ZOOM DETECTOR\n\n     */\n    'zoom': {\n        detect: function (events) {\n            let detection = null;\n\n            // only detect zooms with multiple events\n            if (events.length >= 2) {\n\n                let first = events[events.length - 2];\n                let last = events[events.length - 1];\n\n                // detect multiple multi touch events\n                if (isMultiTouch(first) && isMultiTouch(last)) {\n\n                    // get distances for both points\n                    let firstDistance = touchDistance(first);\n                    let lastDistance = touchDistance(last);\n\n                    // Zoom is onlt when fingers expand away from each other\n                    if (firstDistance < lastDistance ) {\n\n                        return {\n                            distance : lastDistance,\n                            center : touchCenter(last)\n                        }\n                    }\n                }\n            }\n\n            return detection;\n        },\n        dispatchEvent(target, eventData) {\n\n            // create event\n            let swipeEvent = document.createEvent('CustomEvent');\n            swipeEvent.initCustomEvent('zoom', true, false, null);\n            swipeEvent.distance = eventData.distance;\n\n            // dispatch it through the DOM\n            target.dispatchEvent(swipeEvent);\n\n        },\n        repeat: true\n    },\n\n    'pinch': {\n        detect: function (events) {\n            let detection = null;\n\n            // only detect zooms with multiple events\n            if (events.length >= 2) {\n\n                let first = events[events.length - 2];\n                let last = events[events.length - 1];\n\n                // detect multiple multi touch events\n                if (isMultiTouch(first) && isMultiTouch(last)) {\n\n                    // get distances for both points\n                    let firstDistance = touchDistance(first);\n                    let lastDistance = touchDistance(last);\n\n                    if (firstDistance > lastDistance ) {\n\n                        return {\n                            distance : lastDistance,\n                            center : touchCenter(last)\n                        }\n                    }\n                }\n            }\n\n            return detection;\n        },\n        dispatchEvent(target, eventData) {\n\n            // create event\n            let swipeEvent = document.createEvent('CustomEvent');\n            swipeEvent.initCustomEvent('zoom', true, false, null);\n            swipeEvent.distance = eventData.distance;\n\n            // dispatch it through the DOM\n            target.dispatchEvent(swipeEvent);\n\n        },\n        repeat: true\n    }\n\n};\n\n/**\n * Determines if event is detecting mutliple touch points.\n * @param {TouchEvent} event - The TouchEvent to test\n * @returns {boolean}\n */\nfunction isMultiTouch(event) {\n    return event.touches.length > 1;\n}\n\n/**\n * Get distance between two touches of an event. Simple square root.\n * @param {TouchEvent} event - A multi-touch native touch event\n * @returns {number} Distance in pixels between touches\n */\nfunction touchDistance(event) {\n\n    let a = event.touches[0];\n    let b = event.touches[1];\n\n    return Math.sqrt( Math.pow(b.clientX - a.clientX, 2) + Math.pow(b.clientY - a.clientY, 2) );\n}\n\n/**\n * Get center of touch event's touches.\n * @param {TouchEvent} event - The native event to analyse.\n * @return {{x: number, y: number}} The center the supplied event's touches. If there is a single touch, it will return it's coordinates.\n */\nfunction touchCenter(event) {\n    if ( isMultiTouch(event) ) {\n\n        let a = event.touches[0];\n        let b = event.touches[1];\n\n        let aX = a.clientX;\n        let aY = a.clientY;\n\n        let bX = b.clientX;\n        let bY = b.clientY;\n\n        //         start\n        let x = aX + ((bX - aX) / 2);\n        let y = aY + ((bY - aY) / 2);\n\n        return {\n            x : x,\n            y : y\n        }\n\n    } else {\n        let touch = event.touches[0];\n\n        return {\n            x : touch.clientX,\n            y : touch.clientY\n        }\n    }\n}\n\n\n/**\n * Class to track simple touch gestures. Inspired partly by hammer.js\n *\n * @TODO make gestures optional, moving detectors into separate class\n * @todo configure gesture detectors to avoid useless operations on multiple objects\n *\n */\nclass Touch extends EventTarget {\n\n    /**\n     * @param {Element} target - Target of touch events to listen to\n     * @param {Object} options - Options for class behavior. See defaults for more info.\n     */\n    constructor(target, options = {}) {\n        super();\n\n        /**\n         * Save event target\n         * @type {Element}\n         */\n        this.target = target;\n\n        /**\n         * Saved options with default values.\n         * @type {Object}\n         */\n        this.options = defaults(options, Touch.defaultOptions);\n\n        // create and store bound functions that are used as event listeners\n        this._touchEvents = {\n            start: this._touchStartHandler.bind(this),\n            move: this._touchMoveHandler.bind(this),\n            end: this._touchEndHandler.bind(this)\n        };\n\n        this.target.addEventListener('touchstart', this._touchEvents.start);\n        this.target.addEventListener('touchmove', this._touchEvents.move);\n        this.target.addEventListener('touchend', this._touchEvents.end);\n\n        // To help handling whole touch cycle (start -> move -> end) listen to the end event on the window too.\n        if (this.options.bindWindowEnd) {\n            window.addEventListener('touchend', this._touchEvents.end);\n        }\n\n    }\n\n    /**\n     * Get distance between first and last event points on both axis\n     * @return {Number} Distance in pixels between first and last points currently tracked. Based on the first touch of a multi touch events\n     */\n    get distance() {\n\n        // only return a number if there is a proper distance\n        if ( !this._eventBuffer || this._eventBuffer.length < 2 ) {\n            return NaN;\n        } else {\n\n            let a = this._eventBuffer[0].touches[0];\n            let b = this._eventBuffer[ this._eventBuffer.length - 1 ].touches[0];\n\n            return Math.sqrt( Math.pow(b.clientX - a.clientX, 2) + Math.pow(b.clientY - a.clientY, 2) );\n        }\n\n    }\n\n\n    /**\n     * Get distance between first and last event points on the X axis\n     * @return {Number} Distance in pixels between first and last points currently tracked. Based on the first touch of a multi touch events\n     */\n    get distanceX() {\n        // only return a number if there is a proper distance\n        if ( !this._eventBuffer || this._eventBuffer.length < 2 ) {\n            return NaN;\n        } else {\n\n            let a = this._eventBuffer[0].touches[0];\n            let b = this._eventBuffer[ this._eventBuffer.length - 1  ].touches[0];\n\n            return b.clientX - a.clientX;\n        }\n    }\n\n    /**\n     * Get distance between first and last event points on the Y axis\n     * @return {Number} Distance in pixels between first and last points currently tracked. Based on the first touch of a multi touch events\n     */\n    get distanceY() {\n        // only return a number if there is a proper distance\n        if ( !this._eventBuffer || this._eventBuffer.length < 2 ) {\n            return NaN;\n        } else {\n\n            let a = this._eventBuffer[0].touches[0];\n            let b = this._eventBuffer[ this._eventBuffer.length - 1  ].touches[0];\n\n            return b.clientY - a.clientY;\n        }\n    }\n    /**\n     * Remove native events and cleanup\n     */\n    destroy() {\n\n        this.target.removeEventListener('touchstart', this._touchEvents.start);\n        this.target.removeEventListener('touchmove', this._touchEvents.move);\n        this.target.removeEventListener('touchend', this._touchEvents.end);\n\n        if (this.options.bindWindowEnd) {\n            window.removeEventListener('touchend', this._touchEvents.end);\n        }\n\n    }\n\n    /* =======\n\n     Private methods\n\n     ======== */\n\n    /**\n     * Start tracking touch events on the target element.\n     *\n     * @param {TouchEvent} event - Native DOM event\n     * @emits {TouchEvent} Native DOM event\n     * @private\n     */\n    _start(event) {\n\n        // in case 'end()' isn't called properly. Probably shouldn't happen.\n        if (this.isTouched) this.end();\n\n        /**\n         * flag to indicate if there is acutally a touch on the device.\n         * @type {boolean}\n         */\n        this.isTouched = true;\n\n        /**\n         * Internal buffer of events to analyse\n         * @type {TouchEvent[]}\n         * @private\n         */\n        this._eventBuffer = [event];\n\n        /**\n         * Internal list of gestures currently being detected\n         * @type {{}}\n         * @private\n         */\n        this._currentGestures = {};\n\n        this.trigger('start', event);\n    }\n\n    /**\n     *\n     * @param {TouchEvent} event - Native DOM event\n     * @private\n     */\n    _move(event) {\n        this._eventBuffer.push(event);\n\n        // Run detectors\n        // TODO move to sub-class\n        for (let gesture in GESTURES_DEFINITIONS) {\n\n            let gestureDef = GESTURES_DEFINITIONS[gesture];\n            let gestureInfo = gestureDef.detect(this._eventBuffer, this.options);\n\n            // if gesture detected\n            if (gestureInfo) {\n\n                // prevent repeat events on gestures that only should happen once per touch cycle (swipe for example). Could also be handled in touchend?\n                if ( gestureDef.repeat || (!gestureDef.repeat && !this._currentGestures[gesture]) ) {\n\n                    // attempt to prevent default\n                    event.preventDefault();\n\n                    // save gesture\n                    this._currentGestures[gesture] = gestureInfo;\n\n                    if (this.options.domEvents) {\n                        gestureDef.dispatchEvent(this.target, gestureInfo);\n                    }\n\n                    this.trigger(gesture, gestureInfo);\n                }\n\n            }\n        }\n\n\n        this.trigger('move', event);\n\n    }\n\n    /**\n     * End of touch. Reset internal vars\n     * @param event - Native DOM event\n     * @emits {TouchEvent} - Native DOM event\n     * @private\n     */\n    _end(event) {\n\n        // Trigger event before disposing of saved state\n        this.trigger('end', event);\n\n        this._eventBuffer = [];\n        this.isTouched = false;\n\n    }\n\n    /* =======\n\n     Event Handlers\n\n     ======== */\n\n    /**\n     * Native start event handler\n     * @param event\n     * @private\n     */\n    _touchStartHandler(event) {\n\n        // standard behviour is too disable scrolling and zooming on multi touch\n        if (event.touches.length > 1) {\n            event.preventDefault();\n        }\n\n        // if we're already touching, and another finger starts touching, treat it as a move\n        if (this.isTouched) {\n            this._move(event);\n        } else {\n            this._start(event);\n        }\n\n    }\n\n    /**\n     * Native move event handler\n     * @param event\n     * @private\n     */\n    _touchMoveHandler(event) {\n\n        // standard behviour is too disable scrolling and zooming on multi touch\n        if (event.touches.length > 1) {\n            event.preventDefault();\n        }\n\n        this._move(event);\n    }\n\n    /**\n     * Native end event handker\n     * @param event\n     * @private\n     */\n    _touchEndHandler(event) {\n        this._end(event);\n    }\n\n}\n\n/**\n * @static\n * @type {{verticalSwipe: boolean, swipeThreshold: number, domEvents: boolean}}\n */\nTouch.defaultOptions = {\n\n    /**\n     * Dected y axis when detecting swipes. Very often we don't want to block scrolling.\n     */\n    verticalSwipe: false,\n\n    /**\n     * Minimum distance to trigger swipe event\n     */\n    swipeThreshold: 10,\n\n    /**\n     * Will create and trigger custom bubbling DOM events for gestures.\n     */\n    domEvents: true,\n\n    /**\n     * Listen to events on the window to avoid swiping logic out of element bounds\n     */\n    bindWindowEnd : false\n\n};\n\nexport default Touch",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/input/Touch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "variable",
    "name": "GESTURES_DEFINITIONS",
    "memberof": "src/input/Touch.js",
    "static": true,
    "longname": "src/input/Touch.js~GESTURES_DEFINITIONS",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/input/Touch.js",
    "importStyle": null,
    "description": "\nThese constants represent gestures that the touch instance will try to match",
    "lineNumber": 13,
    "type": {
      "types": [
        "{\"swipe\": *, \"zoom\": *, \"pinch\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "isMultiTouch",
    "memberof": "src/input/Touch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/input/Touch.js~isMultiTouch",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/input/Touch.js",
    "importStyle": null,
    "description": "Determines if event is detecting mutliple touch points.",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The TouchEvent to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "touchDistance",
    "memberof": "src/input/Touch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/input/Touch.js~touchDistance",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/input/Touch.js",
    "importStyle": null,
    "description": "Get distance between two touches of an event. Simple square root.",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Distance in pixels between touches"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "A multi-touch native touch event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Distance in pixels between touches"
    },
    "ignore": true
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "touchCenter",
    "memberof": "src/input/Touch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/input/Touch.js~touchCenter",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/input/Touch.js",
    "importStyle": null,
    "description": "Get center of touch event's touches.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The native event to analyse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{x: number, y: number}"
      ],
      "spread": false,
      "description": "The center the supplied event's touches. If there is a single touch, it will return it's coordinates."
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "Touch",
    "memberof": "src/input/Touch.js",
    "static": true,
    "longname": "src/input/Touch.js~Touch",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/input/Touch.js",
    "importStyle": "Touch",
    "description": "Class to track simple touch gestures. Inspired partly by hammer.js",
    "lineNumber": 242,
    "todo": [
      "configure gesture detectors to avoid useless operations on multiple objects"
    ],
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "make gestures optional, moving detectors into separate class"
      }
    ],
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ]
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "Target of touch events to listen to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options for class behavior. See defaults for more info."
      }
    ]
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "target",
    "memberof": "src/input/Touch.js~Touch",
    "static": false,
    "longname": "src/input/Touch.js~Touch#target",
    "access": "public",
    "description": "Save event target",
    "lineNumber": 255,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "options",
    "memberof": "src/input/Touch.js~Touch",
    "static": false,
    "longname": "src/input/Touch.js~Touch#options",
    "access": "public",
    "description": "Saved options with default values.",
    "lineNumber": 261,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "_touchEvents",
    "memberof": "src/input/Touch.js~Touch",
    "static": false,
    "longname": "src/input/Touch.js~Touch#_touchEvents",
    "access": "private",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "type": {
      "types": [
        "{\"start\": *, \"move\": *, \"end\": *}"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "get",
    "name": "distance",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#distance",
    "access": "public",
    "description": "Get distance between first and last event points on both axis",
    "lineNumber": 285,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Distance in pixels between first and last points currently tracked. Based on the first touch of a multi touch events"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "get",
    "name": "distanceX",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#distanceX",
    "access": "public",
    "description": "Get distance between first and last event points on the X axis",
    "lineNumber": 305,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Distance in pixels between first and last points currently tracked. Based on the first touch of a multi touch events"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "get",
    "name": "distanceY",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#distanceY",
    "access": "public",
    "description": "Get distance between first and last event points on the Y axis",
    "lineNumber": 322,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Distance in pixels between first and last points currently tracked. Based on the first touch of a multi touch events"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#destroy",
    "access": "public",
    "description": "Remove native events and cleanup",
    "lineNumber": 337,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "_start",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#_start",
    "access": "private",
    "description": "Start tracking touch events on the target element.",
    "lineNumber": 362,
    "params": [
      {
        "nullable": null,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Native DOM event"
      }
    ],
    "emits": [
      {
        "types": [
          "TouchEvent"
        ],
        "description": "Native DOM event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "isTouched",
    "memberof": "src/input/Touch.js~Touch",
    "static": false,
    "longname": "src/input/Touch.js~Touch#isTouched",
    "access": "public",
    "description": "flag to indicate if there is acutally a touch on the device.",
    "lineNumber": 371,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "_eventBuffer",
    "memberof": "src/input/Touch.js~Touch",
    "static": false,
    "longname": "src/input/Touch.js~Touch#_eventBuffer",
    "access": "private",
    "description": "Internal buffer of events to analyse",
    "lineNumber": 378,
    "type": {
      "nullable": null,
      "types": [
        "TouchEvent[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "_currentGestures",
    "memberof": "src/input/Touch.js~Touch",
    "static": false,
    "longname": "src/input/Touch.js~Touch#_currentGestures",
    "access": "private",
    "description": "Internal list of gestures currently being detected",
    "lineNumber": 385,
    "type": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "_move",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#_move",
    "access": "private",
    "description": "",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Native DOM event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "_end",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#_end",
    "access": "private",
    "description": "End of touch. Reset internal vars",
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Native DOM event"
      }
    ],
    "emits": [
      {
        "types": [
          "TouchEvent"
        ],
        "description": "Native DOM event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "_touchStartHandler",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#_touchStartHandler",
    "access": "private",
    "description": "Native start event handler",
    "lineNumber": 459,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "_touchMoveHandler",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#_touchMoveHandler",
    "access": "private",
    "description": "Native move event handler",
    "lineNumber": 480,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "_touchEndHandler",
    "memberof": "src/input/Touch.js~Touch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Touch.js~Touch#_touchEndHandler",
    "access": "private",
    "description": "Native end event handker",
    "lineNumber": 495,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/net/ImageLoader.js",
    "content": "import defaults from 'lodash/defaults';\n\nimport Loader from './Loader';\n\n/**\n * Load images via an <img /> tag\n */\nclass ImageLoader extends Loader {\n\n    constructor(url, srcset, sizes, options = {}) {\n\n        // make sure it's paused so we can change paused status\n        let paused = options.paused;\n\n        super(url, defaults({paused: true}, options) );\n\n        this.srcset = srcset;\n        this.sizes = sizes;\n\n        if ( !paused ) {\n            this.load();\n        }\n\n    }\n\n    /**\n     * Image load mechanism\n     */\n    load() {\n\n        let image = new Image();\n\n        image.onload = () => {\n            this.status = Loader.STATUS.LOADING;\n            this._promiseResolve({url : this.url, data: image, rawData: image});\n            this._handleLoadComplete();\n        };\n\n        image.onerror = () => {\n            this._promiseReject('Could not load Image : ');\n            this._handleLoadComplete();\n        };\n\n        // If already loaded call load handler manually\n        if (image.complete === true && image.width && image.height) {\n            setTimeout( () => image.onload(), 0);\n        }\n\n        // Add properties to start the load\n        if (this.srcset) image.srcset = this.srcset;\n        if (this.sizes) image.sizes = this.sizes;\n        image.src = this.url;\n\n        return this.promise;\n\n    }\n\n}\n\nexport default ImageLoader;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/net/ImageLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "ImageLoader",
    "memberof": "src/net/ImageLoader.js",
    "static": true,
    "longname": "src/net/ImageLoader.js~ImageLoader",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/net/ImageLoader.js",
    "importStyle": "ImageLoader",
    "description": "Load images via an <img /> tag",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/net/Loader.js~Loader"
    ]
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/net/ImageLoader.js~ImageLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/ImageLoader.js~ImageLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "srcset",
    "memberof": "src/net/ImageLoader.js~ImageLoader",
    "static": false,
    "longname": "src/net/ImageLoader.js~ImageLoader#srcset",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "sizes",
    "memberof": "src/net/ImageLoader.js~ImageLoader",
    "static": false,
    "longname": "src/net/ImageLoader.js~ImageLoader#sizes",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "load",
    "memberof": "src/net/ImageLoader.js~ImageLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/ImageLoader.js~ImageLoader#load",
    "access": "public",
    "description": "Image load mechanism",
    "lineNumber": 29,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "status",
    "memberof": "src/net/ImageLoader.js~ImageLoader",
    "static": false,
    "longname": "src/net/ImageLoader.js~ImageLoader#status",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "src/net/Loader.js",
    "content": "import xhr from 'xhr';\nimport includes from 'lodash/includes';\n\n// Zimple dependencies\nimport EventTarget from '../core/EventTarget';\n\n\nlet loaderID = 0;\n\nclass Loader extends EventTarget {\n\n    constructor(url, options = {paused : false, parseBody : true}) {\n        super();\n\n        this.url = url;\n        this.id = options.id || 'loader-'+loaderID++;\n\n        this.options = options;\n\n        // Load progress, at construct, it is always 0\n        this.progress = 0;\n\n        // Create Promise for this loader, and save the resolve and reject functions for later\n        this.promise = new Promise( (resolve, reject) => {\n            this._promiseResolve = resolve;\n            this._promiseReject = reject;\n        });\n\n        // Start or pause loading\n        if ( this.options.paused ) {\n            this.status = Loader.STATUS.PAUSED;\n        } else {\n            this.load();\n        }\n\n    }\n\n    /**\n     * Start the loading procedure and return the load Promise\n     *\n     * @returns {Promise|Promise<any>}\n     */\n    load() {\n\n        // if a request is already in progress, return the promise\n        if (this.request) {\n            return this.promise;\n        }\n\n        // detect type of load\n        this.request = xhr({\n            url : this.url,\n            beforeSend : (nativeXHR) => {\n                // attach progress event. you never know\n                nativeXHR.addEventListener('progress', (event) => {\n                    this._handleLoadProgress(event); // force context to instance of preloader\n                });\n            }\n        }, (err, response, body) => {\n\n            let statusCodeCategory = parseInt( response.statusCode.toString()[0] );\n\n            if (err) {\n\n                this._promiseReject(new Error(response.text));\n                this._handleLoadComplete();\n\n            } else if ( includes( [4, 5], statusCodeCategory ) ) {\n\n\n\n            } else {\n\n                // always save a copy of the raw data\n                this.rawData = body;\n\n                // might want to parse the body\n                if (this.options.parseBody) {\n\n                    // in case there isn't an extension, resort to content-type sniffing and forcing the type\n                    if ( this.url.lastIndexOf('.') < this.url.lastIndexOf('/')) {\n                        let contentType = response.headers['content-type'];\n                        let type;\n                        if ( contentType.toLowerCase().includes('application/json') ) {\n                            type = 'json';\n                        }\n\n                        this.data = Loader.parseResponseBody( this.url, body, type);\n                    } else {\n                        this.data = Loader.parseResponseBody( this.url, body );\n                    }\n\n                } else {\n                    this.data = body;\n                }\n\n                this._promiseResolve({url : this.url, data: this.data, rawData: body});\n                this.request = null;\n                this._handleLoadComplete();\n            }\n\n        });\n\n        this.status = Loader.STATUS.LOADING;\n\n        return this.promise;\n\n    }\n\n    /**\n     * Internal load event handler\n     * @param event\n     * @private\n     */\n    _handleLoadProgress(event) {\n        if (event.lengthComputable) {\n            this.progress = event.loaded / event.total;\n            this.trigger('progress', {progress : this.progress});\n        }\n    }\n\n    /**\n     * Handle end of loading. including changing loader status and firing events\n     * @protected\n     */\n    _handleLoadComplete() {\n\n        this.status = Loader.STATUS.COMPLETE;\n        this.progress = 1;\n        this.trigger('complete', {target: this});\n\n    }\n\n}\n\n\n\n\n\n\n/**\n * Helper to return a more usable object from the preloader. Simple detection based on file extension\n *\n * @param url the loaded file's URL\n * @param body th loaded file's content\n * @param forceType sometimes we need to force parsing of a certain type regardless of it's file name\n */\nLoader.parseResponseBody = function (url, body, forceType = null) {\n\n    let returnObject;\n\n    let ext = (forceType !== null) ? forceType : url.substr( url.lastIndexOf('.')+1 );\n\n    switch (ext) {\n        case 'js' :\n            returnObject = document.createElement('script');\n            returnObject.textContent = body;\n            break;\n        case 'json' :\n            returnObject = JSON.parse( body );\n            break;\n        case 'svg' :\n            let tempDiv = document.createElement('div');\n            tempDiv.innerHTML = body;\n            returnObject = tempDiv.firstChild;\n            break;\n        default : // pass through\n            returnObject = body;\n    }\n\n    return returnObject;\n\n};\n\nLoader.STATUS = {\n    PAUSED      : 'paused',\n    LOADING     : 'loading',\n    COMPLETE    : 'complete'\n};\n\n\n\nexport {Loader as default};",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/net/Loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "loaderID",
    "memberof": "src/net/Loader.js",
    "static": true,
    "longname": "src/net/Loader.js~loaderID",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/net/Loader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "Loader",
    "memberof": "src/net/Loader.js",
    "static": true,
    "longname": "src/net/Loader.js~Loader",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/net/Loader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ],
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/net/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/Loader.js~Loader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "url",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#url",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "id",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#id",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "options",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#options",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "progress",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#progress",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "promise",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#promise",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "_promiseResolve",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#_promiseResolve",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "_promiseReject",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#_promiseReject",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "status",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#status",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "load",
    "memberof": "src/net/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/Loader.js~Loader#load",
    "access": "public",
    "description": "Start the loading procedure and return the load Promise",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise|Promise<any>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise",
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "request",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#request",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "rawData",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#rawData",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "data",
    "memberof": "src/net/Loader.js~Loader",
    "static": false,
    "longname": "src/net/Loader.js~Loader#data",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "_handleLoadProgress",
    "memberof": "src/net/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/Loader.js~Loader#_handleLoadProgress",
    "access": "private",
    "description": "Internal load event handler",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "_handleLoadComplete",
    "memberof": "src/net/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/Loader.js~Loader#_handleLoadComplete",
    "access": "protected",
    "description": "Handle end of loading. including changing loader status and firing events",
    "lineNumber": 126,
    "params": [],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "function",
    "name": "parseResponseBody",
    "memberof": "src/net/Loader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/net/Loader.js~parseResponseBody",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/net/Loader.js",
    "importStyle": null,
    "description": "Helper to return a more usable object from the preloader. Simple detection based on file extension",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "the loaded file's URL"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "th loaded file's content"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "forceType",
        "description": "sometimes we need to force parsing of a certain type regardless of it's file name"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "file",
    "name": "src/net/LoaderQueue.js",
    "content": "import EventTarget from '../core/EventTarget';\nimport Loader from './Loader';\n\n/**\n *\n * LoaderQueue\n *\n * Simple Event & Promise based queue mechanism for loading multiple preloaders\n *\n */\nclass LoaderQueue extends EventTarget {\n\n    constructor(urls = []) {\n        super();\n\n        // create an array of prelaoders for each url\n        this.loaders = [];\n\n        urls.forEach( (url) => {\n            this.add( url );\n        });\n\n        // Create promise and save it's callbacks to this instance for later access\n        this.promise = new Promise( (resolve, reject) => {\n            this._promiseResolve = resolve;\n            this._promiseReject = reject;\n        });\n\n        // For convenience, force trigger a progress event when there are no loads complete\n        // use setImmediate (probably with polyfill) to force triggering on next event loop (otherwise no listeners will have time to be added)\n        setImmediate( () => this._preloaderCompleteHandler() );\n\n    }\n\n    add(preloaderOrUrl) {\n\n        // determine if we should pause the loader based on how many are currently loading\n        let shouldPause = this.loaders.reduce( (total, loader) => { return total + (loader.status == Loader.STATUS.LOADING ? 1 : 0)}, 0) >= LoaderQueue.MAX_CONCURRENT;\n\n        // create preloader\n        let preloader = ( _.isString(preloaderOrUrl) ) ? new Loader(preloaderOrUrl, {paused: shouldPause} ) : preloaderOrUrl;\n\n        // Attach events\n        preloader.on('complete', this._preloaderCompleteHandler, this);\n        preloader.on('progress', this._preloaderProgressHandler, this);\n\n        this.loaders.push( preloader );\n\n        return preloader;\n    }\n\n    get progress() {\n\n        if (this.loaders.length === 0) {\n            return -1;\n        } else {\n            let totalProgress = this.loaders.reduce( (total, loader) => {return total + loader.progress}, 0);\n            return totalProgress / this.loaders.length;\n        }\n\n    }\n\n    _preloaderProgressHandler(event) {\n        this.trigger('progress', {progress : this.progress});\n    }\n\n    _preloaderCompleteHandler() {\n\n        // get number of complete loaders and total loaders in queue\n        let totalLoaders = this.loaders.length;\n        let completeLoaders = 0;\n        let currentLoaders = 0;\n\n        // Count complete and current loaders, total their progress\n        this.loaders.forEach( loader => {\n\n            if (loader.status === Loader.STATUS.COMPLETE) {\n                completeLoaders++;\n            } else if (loader.status === Loader.STATUS.LOADING) {\n                currentLoaders++;\n            }\n\n        });\n\n        // Trigger events for progress and completion\n        if (completeLoaders === totalLoaders) {\n            this._promiseResolve(this.loaders);\n            this.trigger('complete'); // TODO return loaders? data?\n        } else {\n            this.trigger('progress', {progress: this.progress});\n\n            // if there are less current loaders than MAX_CONCURRENT, unpause them\n            if (currentLoaders < LoaderQueue.MAX_CONCURRENT) {\n\n                /*\n                 Big one liner to unpause queued loaders :\n                 - filters for paused loaders\n                 - takes as many as possible, below MAX_CONCURRENT threshold\n                 - starts load() on each Preloader instance\n                 */\n                this.loaders.filter( loader => loader.status === Loader.STATUS.PAUSED ).slice(0, LoaderQueue.MAX_CONCURRENT - currentLoaders).forEach(loader => loader.load() );\n\n            }\n\n        }\n\n\n    }\n\n}\n\nLoaderQueue.MAX_CONCURRENT = 5;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/net/LoaderQueue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "LoaderQueue",
    "memberof": "src/net/LoaderQueue.js",
    "static": true,
    "longname": "src/net/LoaderQueue.js~LoaderQueue",
    "access": "public",
    "export": false,
    "importPath": "zimple/src/net/LoaderQueue.js",
    "importStyle": null,
    "description": "\nLoaderQueue\n\nSimple Event & Promise based queue mechanism for loading multiple preloaders",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/core/EventTarget.js~EventTarget"
    ],
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "loaders",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#loaders",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "promise",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#promise",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "_promiseResolve",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#_promiseResolve",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "_promiseReject",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#_promiseReject",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "add",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#add",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "preloaderOrUrl",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "progress",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#progress",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "_preloaderProgressHandler",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#_preloaderProgressHandler",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "_preloaderCompleteHandler",
    "memberof": "src/net/LoaderQueue.js~LoaderQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/net/LoaderQueue.js~LoaderQueue#_preloaderCompleteHandler",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/utils/Ticker.js",
    "content": "class Ticker {\n\n\n\n}\n\n\n// Ticker\nexport default Ticker;\n",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/utils/Ticker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "Ticker",
    "memberof": "src/utils/Ticker.js",
    "static": true,
    "longname": "src/utils/Ticker.js~Ticker",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/utils/Ticker.js",
    "importStyle": "Ticker",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "src/utils/objectToQueryString.js",
    "content": "const objectToQueryString = function(obj, prefix) {\n    let str = [], p;\n\n    for(p in obj) {\n        if (obj.hasOwnProperty(p)) {\n            let k = prefix ? prefix + \"[\" + p + \"]\" : p, v = obj[p];\n            str.push((v !== null && typeof v === \"object\") ?\n                objectToQueryString(v, k) :\n                encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\n        }\n    }\n    return str.join(\"&\");\n};\n\nexport default objectToQueryString;",
    "static": true,
    "longname": "/Users/robinlambell/Developer/zimplist-git/src/utils/objectToQueryString.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "objectToQueryString",
    "memberof": "src/utils/objectToQueryString.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/objectToQueryString.js~objectToQueryString",
    "access": "public",
    "export": true,
    "importPath": "zimple/src/utils/objectToQueryString.js",
    "importStyle": "objectToQueryString",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "Zimplist\n======\n>Keep it Zimple.\n\n### What it is ### \nZimplist is A simple framework for building front ends for websites. Zimplist is intended for use in dynamic content-heavy, that mostly get their HTML from the server. This does not exclude the idea of server-side rendering or client-side templates, it just isn't expected by default.\n\n### What it is not ###\nZimplist is not in the same game as Angular, Ember, React, Vue or the myriad of opinionated behemoth front-end frameworks. The aim isn't to enable building single page, JS heavy applications as fast as possible. It would certainly help, but may not be the best tool in the job. There is no change watch, scaffolding tool or CLI. No templating or preferred JS variant language. \n\n## Classes & Modules ##\nFunctionality is separated into ES2015 modules. These include functions, classes and objects organized loosely into folders. Yes ES2015 classes are syntactic sugar and obfuscate the true nature of prototypal inheritance, but it's a coding paradigm many people find useful. \n\n## Documentation ##\nAPI and use manual is generated via [ESDOC](https://esdoc.org) and is available in docs/generated\n\n## Dependencies ##\nZimplist depends on the following third party libraries :\n\n- Lodash for utility functions\n- XHR for XmlHttpRequest Abstraction\n\n## Polyfills ##\nYou may need the following polyfills depending on the browser support you are aiming for\n\n- Element.classList\n- Element.matches\n- Promise\n",
    "longname": "/Users/robinlambell/Developer/zimplist-git/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"zimple\",\n  \"version\": \"1.0.0-rc1\",\n  \"description\": \"A zimple framework for building websites front-ends.\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"test\": \"karma\",\n    \"esdoc\": \"esdoc\"\n  },\n  \"author\": \"Robin Lambell\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^3.19.0\",\n    \"karma\": \"^2.0.0\",\n    \"karma-chrome-launcher\": \"^2.2.0\",\n    \"karma-firefox-launcher\": \"^1.1.0\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"mocha\": \"^5.0.4\"\n  },\n  \"dependencies\": {\n    \"lodash\": \"^4.17.4\"\n  }\n}\n",
    "longname": "/Users/robinlambell/Developer/zimplist-git/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "Zimplist Manual\n===============\n\nZimplist is",
    "longname": "/Users/robinlambell/Developer/zimplist-git/doc/manual/index.md",
    "name": "./doc/manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/robinlambell/Developer/zimplist-git/doc/manual/assets",
    "name": "./doc/manual/assets",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/robinlambell/Developer/zimplist-git/doc/manual/introduction.md",
    "name": "./doc/manual/introduction.md",
    "content": "Introduction\n========\n\nZimplist aims to be the simplist framework for creating small front-end experiences.\n\n## Core concepts ##\nThere are several core concepts to understand when working with Zimplist. They can be summarized as the following : **Modules**, **Classes**, **Events** and **Views**. Here is a brief explanation of each\n    \n### Modules ###\nThe framework is separated into ES6 modules. This standards-friendly organisation of code allows us to pick and choose what functionality is included in the final app. Modules are loosely grouped into folders according to functionality. More information about specific groups is available below.\n\n### Classes ###\nZimplist uses ES6 classes to organise it's code, one class per module, per file. In some occasions singleton instances are exported by default from the module instead of the class.\n \n### Events ###\nZimplist uses the pub/sub design pattern via events. This is the preferred method of communicating between objects in the framework. Event communication is used between parent and child views, on loaders, Input managers (touch, mouse, keyboard) and utilities like the WindowManager and ScrollingTracker.\n\nThese events should not be confused with DOM events that are bound in Views. See the Views section for more information on DOM events.\n\n### Views ###\nViews are what we use to organize the DOM. The most important class for this is the `BaseView`. This class handles the following functionality :\n\n- Storing a reference to the view's element in the `this.el` property\n- Responding to breakpoint changes.\n- Adding, delegating and removing DOM events with built-in book keeping.\n\n## Modules ##\nThe modules in Zimplist are organized into the following top level directories :\n\n- **core** : Important abstract classes, notably `EventTarget`\n- **display** : Anything that appears on the screen, the most important class being `BaseView`. There are sub-directories for **animators** and simple **DOM** manipulation functions\n    - **animation** : Animation helpers and effects\n    - **dom** DOM traveral & manipulation\n- **geometry** : Abstract geometry classes\n- **input** : User input management, Mouse, Touch and Keyboard\n- **net** : Network related code like preloaders\n- **utils** : Various utilities for specific functions like aspect ratio calculations, Scrolling Tracker\n\n## Events ##\nEvents are implemented in the `EventTarget` class and most of the classes in Zimplist inherit from it. The class has `on`, `off` and `trigger` methods to listen and trigger events. It also has `listenTo` and `stopListening` methods to allow any object inheriting from EventTarget to listen to events on another EventTarget without having to handle it's own booking as would be the case with `on`. \n\n## Dependencies & Polyfills ##\nMany utility functions from [Lodash](http://lodash.com) are used. These are imported individually. \n\nFor HTTP requests we use [XHR](https://www.npmjs.com/package/xhr).\n\nWhile not referenced in the code anywhere, we recommend the use of [Modernizr](http://www.modernizr.com)\n\nThe following polyfills are also commonly used:\n    - array.find\n    - array.from\n    - array.includes\n    - css.object-fit\n    - element.classList\n    - element.matches\n    - picturefill\n    - promise\n    - setImmediate\n    - string.includes",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/robinlambell/Developer/zimplist-git/doc/manual/views.md",
    "name": "./doc/manual/views.md",
    "content": "Views\n=====\n\nThe main class for organizing the DOM is `BaseView`. It includes a minimum of functionnality to simplify common tasks when working with the DOM.\n\nBefore describing BaseView's functionality, we need to understand it's intended place in the framework: By design, the DOM of sites using Zimplist are expected to be rendered by the server in their initial state. Each view is passed a DOM node in it's constructor which is stored on the `el` property. This is what we could call the \"root node\".\n\n The application then queries the DOM and instantiates views for the differen't page elements (for example we might have `Header`, `Footer`, `Page`, `Popin` views) Each of these views then sub-divides it's own DOM to separate functionnality if necessary. This sub-division allows each view to be responsible for it's own DOM and allows us to organize communication in the view hierarchy via events and function calls making code easier to debug.\n\nFor example the `Header` view might create a `Menu` view and a `LanguageSelect` view from two sub-elements. We might want to collapse a sub-menu when the language select dropdown is opened. Instead of the `Menu` listening to DOM events on the language select DOM it is not responsible for, the `LanguageSelect` will dispatch an event of type `open` when it is opened. The `Header` View will be listening for this event and when received will call a public `collapseSubMenus()` function on the `Menu` view.\n\n## Querying the DOM ##\n\n`BaseView` includes the `find()` and `findAll` functions which are light proxies to `el.querySelector()` and `el.querySelectorAll()` cast as an Array.\n\n## DOM Events ##\n\nThe biggest advtange of the `BaseView` Class is DOM event management. The most important aspects of this are automatic book-keeping and delegation. \n\n### Book-keeping ###\nBook keeping means that when a DOM event is no longer needed it can be unbound easily, even if the listener was passed as an anonymous function.\n\nIf the developer uses the `remove()` or `destroy()` function. All events are automatically removed to avoid memory leaks.\n\n### Delegation ###\nEvent delegation allows developers to listen to events on different DOM elements than those that trigger them. DOM Event objects natively have a `target` and `currentTarget` property. The `currentTarget` property is the element that has the event listener is attached to. Zimplist by default attaches events to `this.el` which will be the `currentTarget`.\n\nEvent delegation can be further controlled with the third `selector` parameter of the `addDomEvent` function. This parameter can be either of type `String` or `Element`. \n\n* When `selector` is an element, the event will be attached directly to this element instead of `this.el`. This is mostly useful when dealing with events that do not bubble.\n* When `selector` is a string, the listener will only be triggered if the selector matches an element in the DOM hierarchy that the event bubbles through. This element, if found, is attached to the Event object as `delegateTarget`\n\n## Media queries ##\n\n`BaseView` Helps developers work with responsive designs by calling a built-in function when a breakpoint changes.\n\nWhen the user resizes the window and the breakpoint changes, the `breakpointChanged` function is called with two parameters : the new breakpoint and the previous breakpoint. These parameters are optional and are not declared on the dummy function to make overriding a bit lighter.\n\n\n",
    "static": true,
    "access": "public"
  }
]